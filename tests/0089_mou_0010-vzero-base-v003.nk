#! /s/apps/packages/cg/nuke/12.2.v8/platform-linux/libnuke-12.2.8.so -nx
#write_info out file:"/s/prods/colds/sequence/0089_mou/0089_mou_0010/vzero/image/wip/0089_mou_0010-vzero-base-nk-out-v003-acescg-exr/0089_mou_0010-vzero-base-nk-out-v003-acescg.%04d.exr" format:"4608 1582 1" chans:":rgba.red:rgba.green:rgba.blue:" framerange:"993 1442" fps:"24" colorspace:"acescg" datatype:"16 bit half" transfer:"unknown" views:"main" timecode:"15:27:42:22" colorManagement:"OCIO"
version 12.2 v8
define_window_layout_xml {<?xml version="1.0" encoding="UTF-8"?>
<layout version="1.0">
    <window x="1920" y="0" w="1920" h="1176" maximized="1" screen="1">
        <splitter orientation="1">
            <split size="40"/>
            <dock id="" hideTitles="1" activePageId="Toolbar.1">
                <page id="Toolbar.1"/>
            </dock>
            <split size="1876" stretch="1"/>
            <splitter orientation="2">
                <split size="1137"/>
                <dock id="" activePageId="Viewer.1" focus="true">
                    <page id="Viewer.1"/>
                </dock>
            </splitter>
        </splitter>
    </window>
    <window x="0" y="0" w="1920" h="1145" maximized="1" screen="0">
        <splitter orientation="1">
            <split size="1920"/>
            <dock id="" activePageId="DAG.1">
                <page id="DAG.1"/>
                <page id="Curve Editor.1"/>
                <page id="DopeSheet.1"/>
            </dock>
        </splitter>
    </window>
</layout>
}
Root {
 inputs 0
 name /s/prods/colds/sequence/0089_mou/0089_mou_0010/vzero/nuke/wip/0089_mou_0010-vzero-base-v003.nk
 frame 1416
 first_frame 993
 last_frame 1442
 lock_range true
 format "4608 1582 0 0 4608 1582 1 colds"
 proxy_type scale
 proxy_format "1024 778 0 0 1024 778 1 1K_Super_35(full-ap)"
 colorManagement OCIO
 defaultViewerLUT "OCIO LUTs"
 workingSpaceLUT scene_linear
 monitorLut "monitors/Gamma 2.2 - Rec.709"
 int8Lut matte_paint
 int16Lut texture_paint
 logLut compositing_log
 floatLut scene_linear
 addUserKnob {20 mariTab l Mari}
 addUserKnob {26 cmdStatus l "listen status" t "The status of Nuke's command port" T <b>Disabled</b>}
 addUserKnob {26 sendStatus l "send status" t "The status of Nuke's connection to Mari" T <b>Inactive</b>}
 addUserKnob {3 socketPort l "nuke command port" t "Port to listen on. Make sure this matches the command port set in Mari's \"Nuke\" Palette."}
 socketPort 50107
 addUserKnob {6 enableSocket l enabled -STARTLINE}
 addUserKnob {26 divider l "" +STARTLINE}
 addUserKnob {20 advanced n 1}
 advanced 0
 addUserKnob {3 portRange l "port range" t "If the main specified command port is unavailable, Nuke will try using the next port number, and continue until successful or the indicated number of ports have been tried."}
 portRange 200
 addUserKnob {4 enablePortRange l "" t "Indicates whether to use a range of ports up to the given number, or to use only the single one specified." -STARTLINE M {"use range" "single port only"}}
 addUserKnob {6 localhostOnly l "local host only" t "This determines whether the Mari bridge server will listen for connections from any machine, or from \"localhost\" (the local machine) only.<p>Only allowing connections from localhost is more secure, but will prevent you from using the Nuke&lt;&gt;Mari workflow across the network." +STARTLINE}
 addUserKnob {1 hostName l "mari host" t "The machine name or IP address that Mari is running on.\nLeave empty if both Mari and Nuke are running on the same machine."}
 hostName localhost
 addUserKnob {3 socketPortSend l port t "Port that Mari is listening to. Make sure this matches the command port set in Mari's preferences." -STARTLINE}
 socketPortSend 6100
 addUserKnob {2 mariDataDir l "mari data dir" t "Path to directory that will hold transient data to be sent to Mari (exrs, objs and fbx files). If this is left empty, a \"mari\" directory will be created in the nk file's location"}
 mariDataDir "\[getenv NUKE_TEMP_DIR]/mariData"
 addUserKnob {2 mariLocation l "mari launch path" t "The path to launch Mari from.<br>This can also be set using the <b>MARI_INSTALL_PATH</b> environment variable."}
 addUserKnob {20 endGroup n -1}
 addUserKnob {1 timeline_write_node l "Timeline write Node" t "The Write node name  which should be used when showing the comp on the timeline"}
 timeline_write_node out
 addUserKnob {20 studio l Studio}
}
BackdropNode {
 inputs 0
 name BackdropNode19
 knobChanged "try:\n    listenedKnobs = \['text', 'position', 'name']\n    node = nuke.thisNode()\n    name = node.knob('name').value()\n    text = node.knob('text').value()\n    position = node.knob('position').value()\n    position = \"<\" + position + \">\"\n    label = node.knob('label').value()\n    \n    if nuke.thisKnob().name() in listenedKnobs:\n        if text == \"\":\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue()\n            else:\n                node.knob('label').setValue(position + name)\n        else:\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue(text)\n            else:\n                node.knob('label').setValue(position + text)\n                \n    elif nuke.thisKnob().name() == 'font_size':\n        fontSize = node.knob('font_size').value()\n        node.knob('note_font_size').setValue(fontSize)\nexcept:\n    pass"
 tile_color 0x3b3e4aff
 label "<Center>BUILD OUTPUT"
 note_font_size 120
 note_font_color 0xffffffff
 xpos -5647
 ypos 2812
 bookmark false
 bdwidth 5750
 bdheight 2115
 z_order -1
 addUserKnob {20 F_VFX l BackdropNode}
 addUserKnob {43 text l Text}
 text "BUILD OUTPUT"
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 80
 addUserKnob {4 position l "" -STARTLINE M {Left Center}}
 position Center
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.77, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.1, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {26 Ftools l "" +STARTLINE T "<font color=\"#1C1C1C\"> Franklin VFX - 2018"}
}
BackdropNode {
 inputs 0
 name BackdropNode20
 knobChanged "try:\n    listenedKnobs = \['text', 'position', 'name']\n    node = nuke.thisNode()\n    name = node.knob('name').value()\n    text = node.knob('text').value()\n    position = node.knob('position').value()\n    position = \"<\" + position + \">\"\n    label = node.knob('label').value()\n    \n    if nuke.thisKnob().name() in listenedKnobs:\n        if text == \"\":\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue()\n            else:\n                node.knob('label').setValue(position + name)\n        else:\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue(text)\n            else:\n                node.knob('label').setValue(position + text)\n                \n    elif nuke.thisKnob().name() == 'font_size':\n        fontSize = node.knob('font_size').value()\n        node.knob('note_font_size').setValue(fontSize)\nexcept:\n    pass"
 tile_color 0x28252fff
 label "<Center>EXPORT ASSET 2D + 3D\n(code only)"
 note_font_size 120
 xpos -4985
 ypos 207
 bookmark false
 bdwidth 4493
 bdheight 2525
 z_order -1
 addUserKnob {20 F_VFX l BackdropNode}
 addUserKnob {43 text l Text}
 text "EXPORT ASSET 2D + 3D\n(code only)"
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 80
 addUserKnob {4 position l "" -STARTLINE M {Left Center}}
 position Center
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.77, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.1, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {26 Ftools l "" +STARTLINE T "<font color=\"#1C1C1C\"> Franklin VFX - 2018"}
}
BackdropNode {
 inputs 0
 name BKD_IN
 tile_color 0x193f18ff
 label "<center>IN\n\n"
 note_font_size 120
 xpos -4357
 ypos -3701
 bdwidth 2906
 bdheight 1461
}
BackdropNode {
 inputs 0
 name BKD_OUT
 tile_color 0x501617ff
 label "<center>MASTER OUT"
 note_font_size 120
 xpos -5650
 ypos 5720
 bdwidth 4569
 bdheight 919
}
BackdropNode {
 inputs 0
 name BackdropNode1
 knobChanged "try:\n    listenedKnobs = \['text', 'position', 'name']\n    node = nuke.thisNode()\n    name = node.knob('name').value()\n    text = node.knob('text').value()\n    position = node.knob('position').value()\n    position = \"<\" + position + \">\"\n    label = node.knob('label').value()\n    \n    if nuke.thisKnob().name() in listenedKnobs:\n        if text == \"\":\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue()\n            else:\n                node.knob('label').setValue(position + name)\n        else:\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue(text)\n            else:\n                node.knob('label').setValue(position + text)\n                \n    elif nuke.thisKnob().name() == 'font_size':\n        fontSize = node.knob('font_size').value()\n        node.knob('note_font_size').setValue(fontSize)\nexcept:\n    pass"
 tile_color 0x343f43ff
 label "<Center>EXPORT ASSET 2D\n(MIRROR | RETIME | REPO)"
 note_font_size 70
 note_font_color 0xffffffff
 xpos -4823
 ypos 627
 bookmark false
 bdwidth 1528
 bdheight 1926
 addUserKnob {20 F_VFX l BackdropNode}
 addUserKnob {43 text l Text}
 text "EXPORT ASSET 2D\n(MIRROR | RETIME | REPO)"
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 70
 addUserKnob {4 position l "" -STARTLINE M {Left Center}}
 position Center
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.77, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.1, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {26 Ftools l "" +STARTLINE T "<font color=\"#1C1C1C\"> Franklin VFX - 2018"}
}
BackdropNode {
 inputs 0
 name BackdropNode13
 knobChanged "try:\n    listenedKnobs = \['text', 'position', 'name']\n    node = nuke.thisNode()\n    name = node.knob('name').value()\n    text = node.knob('text').value()\n    position = node.knob('position').value()\n    position = \"<\" + position + \">\"\n    label = node.knob('label').value()\n    \n    if nuke.thisKnob().name() in listenedKnobs:\n        if text == \"\":\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue()\n            else:\n                node.knob('label').setValue(position + name)\n        else:\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue(text)\n            else:\n                node.knob('label').setValue(position + text)\n                \n    elif nuke.thisKnob().name() == 'font_size':\n        fontSize = node.knob('font_size').value()\n        node.knob('note_font_size').setValue(fontSize)\nexcept:\n    pass"
 tile_color 0xc0f0cff
 label "<Center>ASSET CTRL"
 note_font_size 120
 note_font_color 0xffffffff
 xpos -5504
 ypos 3601
 bookmark false
 bdwidth 581
 bdheight 597
 addUserKnob {20 F_VFX l BackdropNode}
 addUserKnob {43 text l Text}
 text "ASSET CTRL"
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 120
 addUserKnob {4 position l "" -STARTLINE M {Left Center}}
 position Center
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.77, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.1, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {26 Ftools l "" +STARTLINE T "<font color=\"#1C1C1C\"> Franklin VFX - 2018"}
}
BackdropNode {
 inputs 0
 name BackdropNode16
 knobChanged "try:\n    listenedKnobs = \['text', 'position', 'name']\n    node = nuke.thisNode()\n    name = node.knob('name').value()\n    text = node.knob('text').value()\n    position = node.knob('position').value()\n    position = \"<\" + position + \">\"\n    label = node.knob('label').value()\n    \n    if nuke.thisKnob().name() in listenedKnobs:\n        if text == \"\":\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue()\n            else:\n                node.knob('label').setValue(position + name)\n        else:\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue(text)\n            else:\n                node.knob('label').setValue(position + text)\n                \n    elif nuke.thisKnob().name() == 'font_size':\n        fontSize = node.knob('font_size').value()\n        node.knob('note_font_size').setValue(fontSize)\nexcept:\n    pass"
 tile_color 0x501617ff
 label "<Center>EXTRA OUTPUT"
 note_font_size 120
 xpos -812
 ypos 5717
 bookmark false
 bdwidth 3407
 bdheight 925
 addUserKnob {20 F_VFX l BackdropNode}
 addUserKnob {43 text l Text}
 text "EXTRA OUTPUT"
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 80
 addUserKnob {4 position l "" -STARTLINE M {Left Center}}
 position Center
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.77, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.1, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {26 Ftools l "" +STARTLINE T "<font color=\"#1C1C1C\"> Franklin VFX - 2018"}
}
BackdropNode {
 inputs 0
 name BackdropNode23
 knobChanged "try:\n    listenedKnobs = \['text', 'position', 'name']\n    node = nuke.thisNode()\n    name = node.knob('name').value()\n    text = node.knob('text').value()\n    position = node.knob('position').value()\n    position = \"<\" + position + \">\"\n    label = node.knob('label').value()\n    \n    if nuke.thisKnob().name() in listenedKnobs:\n        if text == \"\":\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue()\n            else:\n                node.knob('label').setValue(position + name)\n        else:\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue(text)\n            else:\n                node.knob('label').setValue(position + text)\n                \n    elif nuke.thisKnob().name() == 'font_size':\n        fontSize = node.knob('font_size').value()\n        node.knob('note_font_size').setValue(fontSize)\nexcept:\n    pass"
 tile_color 0x151b1bff
 label "<Center>WORK ZONE"
 note_font_size 120
 xpos -5341
 ypos -2174
 bookmark false
 bdwidth 5006
 bdheight 2247
 addUserKnob {20 F_VFX l BackdropNode}
 addUserKnob {43 text l Text}
 text "WORK ZONE"
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 80
 addUserKnob {4 position l "" -STARTLINE M {Left Center}}
 position Center
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.77, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.1, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {26 Ftools l "" +STARTLINE T "<font color=\"#1C1C1C\"> Franklin VFX - 2018"}
}
BackdropNode {
 inputs 0
 name BackdropNode4
 knobChanged "try:\n    listenedKnobs = \['text', 'position', 'name']\n    node = nuke.thisNode()\n    name = node.knob('name').value()\n    text = node.knob('text').value()\n    position = node.knob('position').value()\n    position = \"<\" + position + \">\"\n    label = node.knob('label').value()\n    \n    if nuke.thisKnob().name() in listenedKnobs:\n        if text == \"\":\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue()\n            else:\n                node.knob('label').setValue(position + name)\n        else:\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue(text)\n            else:\n                node.knob('label').setValue(position + text)\n                \n    elif nuke.thisKnob().name() == 'font_size':\n        fontSize = node.knob('font_size').value()\n        node.knob('note_font_size').setValue(fontSize)\nexcept:\n    pass"
 tile_color 0x343f43ff
 label "<Center>EXPORT ASSET 3D \n(CAMERA RETIME | CAMERA REPO | CAMERA RETIME & REPO)\n"
 note_font_size 70
 note_font_color 0xffffffff
 xpos -3173
 ypos 630
 bookmark false
 bdwidth 2453
 bdheight 1920
 addUserKnob {20 F_VFX l BackdropNode}
 addUserKnob {43 text l Text}
 text "EXPORT ASSET 3D \n(CAMERA RETIME | CAMERA REPO | CAMERA RETIME & REPO)\n"
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 70
 addUserKnob {4 position l "" -STARTLINE M {Left Center}}
 position Center
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.77, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.1, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {26 Ftools l "" +STARTLINE T "<font color=\"#1C1C1C\"> Franklin VFX - 2018"}
}
BackdropNode {
 inputs 0
 name BackdropNode5
 knobChanged "try:\n    listenedKnobs = \['text', 'position', 'name']\n    node = nuke.thisNode()\n    name = node.knob('name').value()\n    text = node.knob('text').value()\n    position = node.knob('position').value()\n    position = \"<\" + position + \">\"\n    label = node.knob('label').value()\n    \n    if nuke.thisKnob().name() in listenedKnobs:\n        if text == \"\":\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue()\n            else:\n                node.knob('label').setValue(position + name)\n        else:\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue(text)\n            else:\n                node.knob('label').setValue(position + text)\n                \n    elif nuke.thisKnob().name() == 'font_size':\n        fontSize = node.knob('font_size').value()\n        node.knob('note_font_size').setValue(fontSize)\nexcept:\n    pass"
 tile_color 0x414141ff
 label <Center>METADATA
 note_font_size 120
 note_font_color 0xffffffff
 xpos -5651
 ypos 5075
 bookmark false
 bdwidth 5758
 bdheight 530
 addUserKnob {20 F_VFX l BackdropNode}
 addUserKnob {43 text l Text}
 text METADATA
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 80
 addUserKnob {4 position l "" -STARTLINE M {Left Center}}
 position Center
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.77, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.1, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {26 Ftools l "" +STARTLINE T "<font color=\"#1C1C1C\"> Franklin VFX - 2018"}
}
BackdropNode {
 inputs 0
 name BackdropNode6
 knobChanged "try:\n    listenedKnobs = \['text', 'position', 'name']\n    node = nuke.thisNode()\n    name = node.knob('name').value()\n    text = node.knob('text').value()\n    position = node.knob('position').value()\n    position = \"<\" + position + \">\"\n    label = node.knob('label').value()\n    \n    if nuke.thisKnob().name() in listenedKnobs:\n        if text == \"\":\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue()\n            else:\n                node.knob('label').setValue(position + name)\n        else:\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue(text)\n            else:\n                node.knob('label').setValue(position + text)\n                \n    elif nuke.thisKnob().name() == 'font_size':\n        fontSize = node.knob('font_size').value()\n        node.knob('note_font_size').setValue(fontSize)\nexcept:\n    pass"
 tile_color 0x313a33ff
 label <Center>VZERO
 note_font_size 40
 note_font_color 0xffffffff
 xpos -3333
 ypos 3468
 bookmark false
 bdwidth 925
 bdheight 1283
 addUserKnob {20 F_VFX l BackdropNode}
 addUserKnob {43 text l Text}
 text VZERO
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 40
 addUserKnob {4 position l "" -STARTLINE M {Left Center}}
 position Center
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.77, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.1, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {26 Ftools l "" +STARTLINE T "<font color=\"#1C1C1C\"> Franklin VFX - 2018"}
}
BackdropNode {
 inputs 0
 name BackdropNode8
 knobChanged "try:\n    listenedKnobs = \['text', 'position', 'name']\n    node = nuke.thisNode()\n    name = node.knob('name').value()\n    text = node.knob('text').value()\n    position = node.knob('position').value()\n    position = \"<\" + position + \">\"\n    label = node.knob('label').value()\n    \n    if nuke.thisKnob().name() in listenedKnobs:\n        if text == \"\":\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue()\n            else:\n                node.knob('label').setValue(position + name)\n        else:\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue(text)\n            else:\n                node.knob('label').setValue(position + text)\n                \n    elif nuke.thisKnob().name() == 'font_size':\n        fontSize = node.knob('font_size').value()\n        node.knob('note_font_size').setValue(fontSize)\nexcept:\n    pass"
 tile_color 0xb28b00ff
 label "<Center>EXPORT\nASSET\nBUTTON"
 note_font_size 120
 note_font_color 0xffffffff
 xpos -1531
 ypos -1804
 bookmark false
 bdwidth 687
 bdheight 787
 addUserKnob {20 F_VFX l BackdropNode}
 addUserKnob {43 text l Text}
 text "EXPORT\nASSET\nBUTTON"
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 120
 addUserKnob {4 position l "" -STARTLINE M {Left Center}}
 position Center
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.77, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.1, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {26 Ftools l "" +STARTLINE T "<font color=\"#1C1C1C\"> Franklin VFX - 2018"}
}
BackdropNode {
 inputs 0
 name BKD_CAM
 label "CAM 3D\n\nse trouve\ndans SHOT/common/camera/"
 note_font_size 30
 note_font_color 0xffffffff
 xpos -2666
 ypos 1019
 bookmark false
 bdwidth 515
 bdheight 422
 z_order 1
}
BackdropNode {
 inputs 0
 name BKD_DGN_RETIME
 knobChanged "try:\n    listenedKnobs = \['text', 'position', 'name']\n    node = nuke.thisNode()\n    name = node.knob('name').value()\n    text = node.knob('text').value()\n    position = node.knob('position').value()\n    position = \"<\" + position + \">\"\n    label = node.knob('label').value()\n    \n    if nuke.thisKnob().name() in listenedKnobs:\n        if text == \"\":\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue()\n            else:\n                node.knob('label').setValue(position + name)\n        else:\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue(text)\n            else:\n                node.knob('label').setValue(position + text)\n                \n    elif nuke.thisKnob().name() == 'font_size':\n        fontSize = node.knob('font_size').value()\n        node.knob('note_font_size').setValue(fontSize)\nexcept:\n    pass"
 tile_color 0x313a33ff
 label "<Center>DGN / RETIME"
 note_font_size 40
 note_font_color 0xffffffff
 xpos -2323
 ypos 3466
 bookmark false
 bdwidth 1280
 bdheight 1288
 z_order 1
 addUserKnob {20 F_VFX l BackdropNode}
 addUserKnob {43 text l Text}
 text "DGN / RETIME"
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 40
 addUserKnob {4 position l "" -STARTLINE M {Left Center}}
 position Center
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.77, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.1, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {26 Ftools l "" +STARTLINE T "<font color=\"#1C1C1C\"> Franklin VFX - 2018"}
}
BackdropNode {
 inputs 0
 name BKD_REPO
 knobChanged "try:\n    listenedKnobs = \['text', 'position', 'name']\n    node = nuke.thisNode()\n    name = node.knob('name').value()\n    text = node.knob('text').value()\n    position = node.knob('position').value()\n    position = \"<\" + position + \">\"\n    label = node.knob('label').value()\n    \n    if nuke.thisKnob().name() in listenedKnobs:\n        if text == \"\":\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue()\n            else:\n                node.knob('label').setValue(position + name)\n        else:\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue(text)\n            else:\n                node.knob('label').setValue(position + text)\n                \n    elif nuke.thisKnob().name() == 'font_size':\n        fontSize = node.knob('font_size').value()\n        node.knob('note_font_size').setValue(fontSize)\nexcept:\n    pass"
 tile_color 0x8d2ba5ff
 label <Center>REPO
 note_font_size 30
 note_font_color 0xffffffff
 xpos -4569
 ypos 1178
 bookmark false
 bdwidth 387
 bdheight 443
 z_order 1
 addUserKnob {20 F_VFX l BackdropNode}
 addUserKnob {43 text l Text}
 text REPO
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 30
 addUserKnob {4 position l "" -STARTLINE M {Left Center}}
 position Center
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.77, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.1, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {26 Ftools l "" +STARTLINE T "<font color=\"#1C1C1C\"> Franklin VFX - 2018"}
}
BackdropNode {
 inputs 0
 name BKD_REPO_BUILD
 knobChanged "try:\n    listenedKnobs = \['text', 'position', 'name']\n    node = nuke.thisNode()\n    name = node.knob('name').value()\n    text = node.knob('text').value()\n    position = node.knob('position').value()\n    position = \"<\" + position + \">\"\n    label = node.knob('label').value()\n    \n    if nuke.thisKnob().name() in listenedKnobs:\n        if text == \"\":\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue()\n            else:\n                node.knob('label').setValue(position + name)\n        else:\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue(text)\n            else:\n                node.knob('label').setValue(position + text)\n                \n    elif nuke.thisKnob().name() == 'font_size':\n        fontSize = node.knob('font_size').value()\n        node.knob('note_font_size').setValue(fontSize)\nexcept:\n    pass"
 tile_color 0xa54861ff
 label "<Center>REPO build"
 note_font_size 30
 note_font_color 0xffffffff
 xpos -4580
 ypos 1924
 bookmark false
 bdwidth 386
 bdheight 371
 z_order 1
 addUserKnob {20 F_VFX l BackdropNode}
 addUserKnob {43 text l Text}
 text "REPO build"
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 30
 addUserKnob {4 position l "" -STARTLINE M {Left Center}}
 position Center
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.77, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.1, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {26 Ftools l "" +STARTLINE T "<font color=\"#1C1C1C\"> Franklin VFX - 2018"}
}
BackdropNode {
 inputs 0
 name BKD_RETIME
 knobChanged "try:\n    listenedKnobs = \['text', 'position', 'name']\n    node = nuke.thisNode()\n    name = node.knob('name').value()\n    text = node.knob('text').value()\n    position = node.knob('position').value()\n    position = \"<\" + position + \">\"\n    label = node.knob('label').value()\n    \n    if nuke.thisKnob().name() in listenedKnobs:\n        if text == \"\":\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue()\n            else:\n                node.knob('label').setValue(position + name)\n        else:\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue(text)\n            else:\n                node.knob('label').setValue(position + text)\n                \n    elif nuke.thisKnob().name() == 'font_size':\n        fontSize = node.knob('font_size').value()\n        node.knob('note_font_size').setValue(fontSize)\nexcept:\n    pass"
 tile_color 0x23b290ff
 label <Center>RETIME
 note_font_size 30
 note_font_color 0xffffffff
 xpos -3823
 ypos 1517
 bookmark false
 bdwidth 405
 bdheight 446
 z_order 1
 addUserKnob {20 F_VFX l BackdropNode}
 addUserKnob {43 text l Text}
 text RETIME
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 30
 addUserKnob {4 position l "" -STARTLINE M {Left Center}}
 position Center
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.77, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.1, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {26 Ftools l "" +STARTLINE T "<font color=\"#1C1C1C\"> Franklin VFX - 2018"}
}
BackdropNode {
 inputs 0
 name BackdropNode10
 knobChanged "try:\n    listenedKnobs = \['text', 'position', 'name']\n    node = nuke.thisNode()\n    name = node.knob('name').value()\n    text = node.knob('text').value()\n    position = node.knob('position').value()\n    position = \"<\" + position + \">\"\n    label = node.knob('label').value()\n    \n    if nuke.thisKnob().name() in listenedKnobs:\n        if text == \"\":\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue()\n            else:\n                node.knob('label').setValue(position + name)\n        else:\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue(text)\n            else:\n                node.knob('label').setValue(position + text)\n                \n    elif nuke.thisKnob().name() == 'font_size':\n        fontSize = node.knob('font_size').value()\n        node.knob('note_font_size').setValue(fontSize)\nexcept:\n    pass"
 tile_color 0x28232bff
 label "<Left>Export Retimed \nCamera"
 note_font_size 30
 xpos -3064
 ypos 1507
 bookmark false
 bdwidth 584
 bdheight 826
 z_order 1
 addUserKnob {20 F_VFX l BackdropNode}
 addUserKnob {43 text l Text}
 text "Export Retimed \nCamera"
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 30
 addUserKnob {4 position l "" -STARTLINE M {Left Center}}
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.77, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.1, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {26 Ftools l "" +STARTLINE T "<font color=\"#1C1C1C\"> Franklin VFX - 2018"}
}
BackdropNode {
 inputs 0
 name BackdropNode12
 knobChanged "try:\n    listenedKnobs = \['text', 'position', 'name']\n    node = nuke.thisNode()\n    name = node.knob('name').value()\n    text = node.knob('text').value()\n    position = node.knob('position').value()\n    position = \"<\" + position + \">\"\n    label = node.knob('label').value()\n    \n    if nuke.thisKnob().name() in listenedKnobs:\n        if text == \"\":\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue()\n            else:\n                node.knob('label').setValue(position + name)\n        else:\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue(text)\n            else:\n                node.knob('label').setValue(position + text)\n                \n    elif nuke.thisKnob().name() == 'font_size':\n        fontSize = node.knob('font_size').value()\n        node.knob('note_font_size').setValue(fontSize)\nexcept:\n    pass"
 tile_color 0x322b29ff
 label "<Center>check VZERO"
 note_font_size 25
 xpos -2877
 ypos 4178
 bookmark false
 bdwidth 424
 bdheight 466
 z_order 1
 addUserKnob {20 F_VFX l BackdropNode}
 addUserKnob {43 text l Text}
 text "check VZERO"
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 25
 addUserKnob {4 position l "" -STARTLINE M {Left Center}}
 position Center
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.77, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.1, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {26 Ftools l "" +STARTLINE T "<font color=\"#1C1C1C\"> Franklin VFX - 2018"}
}
BackdropNode {
 inputs 0
 name BackdropNode18
 knobChanged "try:\n    listenedKnobs = \['text', 'position', 'name']\n    node = nuke.thisNode()\n    name = node.knob('name').value()\n    text = node.knob('text').value()\n    position = node.knob('position').value()\n    position = \"<\" + position + \">\"\n    label = node.knob('label').value()\n    \n    if nuke.thisKnob().name() in listenedKnobs:\n        if text == \"\":\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue()\n            else:\n                node.knob('label').setValue(position + name)\n        else:\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue(text)\n            else:\n                node.knob('label').setValue(position + text)\n                \n    elif nuke.thisKnob().name() == 'font_size':\n        fontSize = node.knob('font_size').value()\n        node.knob('note_font_size').setValue(fontSize)\nexcept:\n    pass"
 tile_color 0xc0f0cff
 label "<Center>WRITE CTRL"
 note_font_size 120
 note_font_color 0xffffffff
 xpos -5497
 ypos 5899
 bookmark false
 bdwidth 566
 bdheight 561
 z_order 1
 addUserKnob {20 F_VFX l BackdropNode}
 addUserKnob {43 text l Text}
 text "WRITE CTRL"
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 120
 addUserKnob {4 position l "" -STARTLINE M {Left Center}}
 position Center
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.77, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.1, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {26 Ftools l "" +STARTLINE T "<font color=\"#1C1C1C\"> Franklin VFX - 2018"}
}
BackdropNode {
 inputs 0
 name BackdropNode2
 knobChanged "try:\n    listenedKnobs = \['text', 'position', 'name']\n    node = nuke.thisNode()\n    name = node.knob('name').value()\n    text = node.knob('text').value()\n    position = node.knob('position').value()\n    position = \"<\" + position + \">\"\n    label = node.knob('label').value()\n    \n    if nuke.thisKnob().name() in listenedKnobs:\n        if text == \"\":\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue()\n            else:\n                node.knob('label').setValue(position + name)\n        else:\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue(text)\n            else:\n                node.knob('label').setValue(position + text)\n                \n    elif nuke.thisKnob().name() == 'font_size':\n        fontSize = node.knob('font_size').value()\n        node.knob('note_font_size').setValue(fontSize)\nexcept:\n    pass"
 tile_color 0x2e3339ff
 label "<Center>EXPORT ASCII"
 note_font_size 80
 note_font_color 0xffffffff
 xpos -1584
 ypos 1532
 bookmark false
 bdwidth 726
 bdheight 715
 z_order 1
 addUserKnob {20 F_VFX l BackdropNode}
 addUserKnob {43 text l Text}
 text "EXPORT ASCII"
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 80
 addUserKnob {4 position l "" -STARTLINE M {Left Center}}
 position Center
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.77, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.1, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {26 Ftools l "" +STARTLINE T "<font color=\"#1C1C1C\"> Franklin VFX - 2018"}
}
BackdropNode {
 inputs 0
 name BackdropNode21
 knobChanged "try:\n    listenedKnobs = \['text', 'position', 'name']\n    node = nuke.thisNode()\n    name = node.knob('name').value()\n    text = node.knob('text').value()\n    position = node.knob('position').value()\n    position = \"<\" + position + \">\"\n    label = node.knob('label').value()\n    \n    if nuke.thisKnob().name() in listenedKnobs:\n        if text == \"\":\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue()\n            else:\n                node.knob('label').setValue(position + name)\n        else:\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue(text)\n            else:\n                node.knob('label').setValue(position + text)\n                \n    elif nuke.thisKnob().name() == 'font_size':\n        fontSize = node.knob('font_size').value()\n        node.knob('note_font_size').setValue(fontSize)\nexcept:\n    pass"
 tile_color 0x28232bff
 label "<Left>Export Repo \nCamera"
 note_font_size 30
 xpos -2272
 ypos 1507
 bookmark false
 bdwidth 584
 bdheight 826
 z_order 1
 addUserKnob {20 F_VFX l BackdropNode}
 addUserKnob {43 text l Text}
 text "Export Repo \nCamera"
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 30
 addUserKnob {4 position l "" -STARTLINE M {Left Center}}
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.77, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.1, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {26 Ftools l "" +STARTLINE T "<font color=\"#1C1C1C\"> Franklin VFX - 2018"}
}
BackdropNode {
 inputs 0
 name BackdropNode28
 knobChanged "try:\n    listenedKnobs = \['text', 'position', 'name']\n    node = nuke.thisNode()\n    name = node.knob('name').value()\n    text = node.knob('text').value()\n    position = node.knob('position').value()\n    position = \"<\" + position + \">\"\n    label = node.knob('label').value()\n    \n    if nuke.thisKnob().name() in listenedKnobs:\n        if text == \"\":\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue()\n            else:\n                node.knob('label').setValue(position + name)\n        else:\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue(text)\n            else:\n                node.knob('label').setValue(position + text)\n                \n    elif nuke.thisKnob().name() == 'font_size':\n        fontSize = node.knob('font_size').value()\n        node.knob('note_font_size').setValue(fontSize)\nexcept:\n    pass"
 tile_color 0x322b29ff
 label "<Center>check VZERO"
 note_font_size 25
 xpos -3941
 ypos 4125
 bookmark false
 bdwidth 343
 bdheight 344
 z_order 1
 addUserKnob {20 F_VFX l BackdropNode}
 addUserKnob {43 text l Text}
 text "check VZERO"
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 25
 addUserKnob {4 position l "" -STARTLINE M {Left Center}}
 position Center
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.77, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.1, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {26 Ftools l "" +STARTLINE T "<font color=\"#1C1C1C\"> Franklin VFX - 2018"}
}
BackdropNode {
 inputs 0
 name BackdropNode3
 knobChanged "try:\n    listenedKnobs = \['text', 'position', 'name']\n    node = nuke.thisNode()\n    name = node.knob('name').value()\n    text = node.knob('text').value()\n    position = node.knob('position').value()\n    position = \"<\" + position + \">\"\n    label = node.knob('label').value()\n    \n    if nuke.thisKnob().name() in listenedKnobs:\n        if text == \"\":\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue()\n            else:\n                node.knob('label').setValue(position + name)\n        else:\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue(text)\n            else:\n                node.knob('label').setValue(position + text)\n                \n    elif nuke.thisKnob().name() == 'font_size':\n        fontSize = node.knob('font_size').value()\n        node.knob('note_font_size').setValue(fontSize)\nexcept:\n    pass"
 tile_color 0x313a33ff
 label "<Center>RETIME UNDISTO LUT"
 note_font_size 40
 note_font_color 0xffffffff
 xpos -4206
 ypos 3470
 bookmark false
 bdwidth 757
 bdheight 1279
 z_order 1
 addUserKnob {20 F_VFX l BackdropNode}
 addUserKnob {43 text l Text}
 text "RETIME UNDISTO LUT"
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 40
 addUserKnob {4 position l "" -STARTLINE M {Left Center}}
 position Center
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.77, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.1, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {26 Ftools l "" +STARTLINE T "<font color=\"#1C1C1C\"> Franklin VFX - 2018"}
}
BackdropNode {
 inputs 0
 name CTRL_TYPE_OF_SHOT
 knobChanged "try:\n    listenedKnobs = \['text', 'position', 'name']\n    node = nuke.thisNode()\n    name = node.knob('name').value()\n    text = node.knob('text').value()\n    position = node.knob('position').value()\n    position = \"<\" + position + \">\"\n    label = node.knob('label').value()\n    \n    if nuke.thisKnob().name() in listenedKnobs:\n        if text == \"\":\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue()\n            else:\n                node.knob('label').setValue(position + name)\n        else:\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue(text)\n            else:\n                node.knob('label').setValue(position + text)\n                \n    elif nuke.thisKnob().name() == 'font_size':\n        fontSize = node.knob('font_size').value()\n        node.knob('note_font_size').setValue(fontSize)\nexcept:\n    pass"
 tile_color 0x991616ff
 label "<Center>TYPE OF SHOT\nSETTINGS\n\n"
 note_font_size 90
 note_font_color 0xffffffff
 xpos -5078
 ypos -1814
 bookmark false
 bdwidth 916
 bdheight 1828
 z_order 1
 addUserKnob {20 F_VFX l BackdropNode}
 addUserKnob {43 text l Text}
 text "TYPE OF SHOT\nSETTINGS\n\n"
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 80
 addUserKnob {4 position l "" -STARTLINE M {Left Center}}
 position Center
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.77, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.1, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {26 Ftools l "" +STARTLINE T "<font color=\"#1C1C1C\"> Franklin VFX - 2018"}
}
BackdropNode {
 inputs 0
 name BKD_DGC
 tile_color 0x4f6c46ff
 label DGC
 note_font_size 70
 xpos -3354
 ypos -3279
 bookmark false
 bdwidth 834
 bdheight 857
 z_order 2
}
BackdropNode {
 inputs 0
 name BKD_MASTER
 tile_color 0x436c2fff
 label MASTER
 note_font_size 70
 xpos -4090
 ypos -3280
 bookmark false
 bdwidth 591
 bdheight 859
 z_order 2
}
BackdropNode {
 inputs 0
 name BKD_PLATE
 tile_color 0x2f6c34ff
 label PLATE
 note_font_size 70
 xpos -2375
 ypos -3282
 bookmark false
 bdwidth 592
 bdheight 863
 z_order 2
}
BackdropNode {
 inputs 0
 name BackdropNode11
 knobChanged "try:\n    listenedKnobs = \['text', 'position', 'name']\n    node = nuke.thisNode()\n    name = node.knob('name').value()\n    text = node.knob('text').value()\n    position = node.knob('position').value()\n    position = \"<\" + position + \">\"\n    label = node.knob('label').value()\n    \n    if nuke.thisKnob().name() in listenedKnobs:\n        if text == \"\":\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue()\n            else:\n                node.knob('label').setValue(position + name)\n        else:\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue(text)\n            else:\n                node.knob('label').setValue(position + text)\n                \n    elif nuke.thisKnob().name() == 'font_size':\n        fontSize = node.knob('font_size').value()\n        node.knob('note_font_size').setValue(fontSize)\nexcept:\n    pass"
 tile_color 0x404035ff
 label "<Center>Cam with retime expression"
 note_font_size 25
 xpos -2881
 ypos 1789
 bookmark false
 bdwidth 219
 bdheight 201
 z_order 2
 addUserKnob {20 F_VFX l BackdropNode}
 addUserKnob {43 text l Text}
 text "Cam with retime expression"
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 25
 addUserKnob {4 position l "" -STARTLINE M {Left Center}}
 position Center
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.77, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.1, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {26 Ftools l "" +STARTLINE T "<font color=\"#1C1C1C\"> Franklin VFX - 2018"}
}
BackdropNode {
 inputs 0
 name BackdropNode15
 knobChanged "try:\n    listenedKnobs = \['text', 'position', 'name']\n    node = nuke.thisNode()\n    name = node.knob('name').value()\n    text = node.knob('text').value()\n    position = node.knob('position').value()\n    position = \"<\" + position + \">\"\n    label = node.knob('label').value()\n    \n    if nuke.thisKnob().name() in listenedKnobs:\n        if text == \"\":\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue()\n            else:\n                node.knob('label').setValue(position + name)\n        else:\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue(text)\n            else:\n                node.knob('label').setValue(position + text)\n                \n    elif nuke.thisKnob().name() == 'font_size':\n        fontSize = node.knob('font_size').value()\n        node.knob('note_font_size').setValue(fontSize)\nexcept:\n    pass"
 tile_color 0x2d2c5eff
 label "<Center>SETTING FROM \nSHOTGRID \"TAGS\""
 note_font_size 80
 note_font_color 0xffffffff
 xpos -4944
 ypos -1550
 bookmark false
 bdwidth 656
 bdheight 973
 z_order 2
 addUserKnob {20 F_VFX l BackdropNode}
 addUserKnob {43 text l Text}
 text "FROM SHOTGRID\nTAGS"
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 80
 addUserKnob {4 position l "" -STARTLINE M {Left Center}}
 position Center
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.77, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.1, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {26 Ftools l "" +STARTLINE T "<font color=\"#1C1C1C\"> Franklin VFX - 2018"}
}
BackdropNode {
 inputs 0
 name BackdropNode17
 knobChanged "try:\n    listenedKnobs = \['text', 'position', 'name']\n    node = nuke.thisNode()\n    name = node.knob('name').value()\n    text = node.knob('text').value()\n    position = node.knob('position').value()\n    position = \"<\" + position + \">\"\n    label = node.knob('label').value()\n    \n    if nuke.thisKnob().name() in listenedKnobs:\n        if text == \"\":\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue()\n            else:\n                node.knob('label').setValue(position + name)\n        else:\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue(text)\n            else:\n                node.knob('label').setValue(position + text)\n                \n    elif nuke.thisKnob().name() == 'font_size':\n        fontSize = node.knob('font_size').value()\n        node.knob('note_font_size').setValue(fontSize)\nexcept:\n    pass"
 tile_color 0x358534ff
 label "<Center>MANUAL SETTING"
 note_font_size 80
 note_font_color 0xffffffff
 xpos -4930
 ypos -522
 bookmark false
 bdwidth 646
 bdheight 503
 z_order 2
 addUserKnob {20 F_VFX l BackdropNode}
 addUserKnob {43 text l Text}
 text "MANUAL SETTING"
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 80
 addUserKnob {4 position l "" -STARTLINE M {Left Center}}
 position Center
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.77, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.1, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {26 Ftools l "" +STARTLINE T "<font color=\"#1C1C1C\"> Franklin VFX - 2018"}
}
BackdropNode {
 inputs 0
 name BackdropNode22
 knobChanged "try:\n    listenedKnobs = \['text', 'position', 'name']\n    node = nuke.thisNode()\n    name = node.knob('name').value()\n    text = node.knob('text').value()\n    position = node.knob('position').value()\n    position = \"<\" + position + \">\"\n    label = node.knob('label').value()\n    \n    if nuke.thisKnob().name() in listenedKnobs:\n        if text == \"\":\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue()\n            else:\n                node.knob('label').setValue(position + name)\n        else:\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue(text)\n            else:\n                node.knob('label').setValue(position + text)\n                \n    elif nuke.thisKnob().name() == 'font_size':\n        fontSize = node.knob('font_size').value()\n        node.knob('note_font_size').setValue(fontSize)\nexcept:\n    pass"
 tile_color 0x404035ff
 label "<Center>Cam with repo and retime if retimed shot"
 note_font_size 25
 xpos -2188
 ypos 1789
 bookmark false
 bdwidth 219
 bdheight 201
 z_order 2
 addUserKnob {20 F_VFX l BackdropNode}
 addUserKnob {43 text l Text}
 text "Cam with repo and retime if retimed shot"
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 25
 addUserKnob {4 position l "" -STARTLINE M {Left Center}}
 position Center
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.77, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.1, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {26 Ftools l "" +STARTLINE T "<font color=\"#1C1C1C\"> Franklin VFX - 2018"}
}
BackdropNode {
 inputs 0
 name BackdropNode24
 tile_color 0x141414ff
 label "TO LGT"
 note_font_size 42
 xpos -3798
 ypos 6079
 appearance Border
 border_width 10
 bdwidth 326
 bdheight 331
 z_order 2
}
BackdropNode {
 inputs 0
 name BackdropNode25
 tile_color 0x141414ff
 label "TO ANIM"
 note_font_size 42
 xpos -4146
 ypos 6080
 appearance Border
 border_width 10
 bdwidth 326
 bdheight 331
 z_order 2
}
BackdropNode {
 inputs 0
 name BackdropNode26
 tile_color 0xaaaaaa00
 label "shot LUT"
 note_font_size 42
 xpos -4109
 ypos 4166
 bdwidth 232
 bdheight 118
 z_order 2
}
BackdropNode {
 inputs 0
 name BackdropNode27
 tile_color 0xaaaaaa00
 label "shot LUT"
 note_font_size 42
 xpos -2787
 ypos 4420
 bdwidth 232
 bdheight 118
 z_order 2
}
BackdropNode {
 inputs 0
 name BackdropNode29
 tile_color 0x141414ff
 label "QC retime"
 note_font_size 42
 xpos -4748
 ypos 6074
 appearance Border
 border_width 10
 bdwidth 326
 bdheight 331
 z_order 2
}
BackdropNode {
 inputs 0
 name BackdropNode30
 tile_color 0x141414ff
 label "QC confo"
 note_font_size 42
 xpos -2867
 ypos 6085
 appearance Border
 border_width 10
 bdwidth 326
 bdheight 331
 z_order 2
}
BackdropNode {
 inputs 0
 name BackdropNode31
 tile_color 0x141414ff
 label "V ZERO OUT"
 note_font_size 42
 xpos -3217
 ypos 6085
 appearance Border
 border_width 10
 bdwidth 326
 bdheight 331
 z_order 2
}
BackdropNode {
 inputs 0
 name BackdropNode51
 tile_color 0x141414ff
 label "TO DMP"
 note_font_size 42
 xpos -2164
 ypos 6080
 appearance Border
 border_width 10
 bdwidth 339
 bdheight 321
 z_order 2
}
BackdropNode {
 inputs 0
 name BackdropNode52
 tile_color 0x141414ff
 label "TO CMP"
 note_font_size 42
 xpos -1775
 ypos 6072
 appearance Border
 border_width 10
 bdwidth 3399
 bdheight 335
 z_order 2
}
BackdropNode {
 inputs 0
 name BackdropNode7
 knobChanged "try:\n    listenedKnobs = \['text', 'position', 'name']\n    node = nuke.thisNode()\n    name = node.knob('name').value()\n    text = node.knob('text').value()\n    position = node.knob('position').value()\n    position = \"<\" + position + \">\"\n    label = node.knob('label').value()\n    \n    if nuke.thisKnob().name() in listenedKnobs:\n        if text == \"\":\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue()\n            else:\n                node.knob('label').setValue(position + name)\n        else:\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue(text)\n            else:\n                node.knob('label').setValue(position + text)\n                \n    elif nuke.thisKnob().name() == 'font_size':\n        fontSize = node.knob('font_size').value()\n        node.knob('note_font_size').setValue(fontSize)\nexcept:\n    pass"
 tile_color 0x393a46ff
 label "<Center>OUT INFO SHOT"
 note_font_size 26
 note_font_color 0xffffffff
 xpos -4782
 ypos 3473
 bookmark false
 bdwidth 522
 bdheight 1274
 z_order 2
 addUserKnob {20 F_VFX l BackdropNode}
 addUserKnob {43 text l Text}
 text INUTILE
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 80
 addUserKnob {4 position l "" -STARTLINE M {Left Center}}
 position Center
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.77, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.1, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {26 Ftools l "" +STARTLINE T "<font color=\"#1C1C1C\"> Franklin VFX - 2018"}
}
BackdropNode {
 inputs 0
 name BackdropNode9
 knobChanged "try:\n    listenedKnobs = \['text', 'position', 'name']\n    node = nuke.thisNode()\n    name = node.knob('name').value()\n    text = node.knob('text').value()\n    position = node.knob('position').value()\n    position = \"<\" + position + \">\"\n    label = node.knob('label').value()\n    \n    if nuke.thisKnob().name() in listenedKnobs:\n        if text == \"\":\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue()\n            else:\n                node.knob('label').setValue(position + name)\n        else:\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue(text)\n            else:\n                node.knob('label').setValue(position + text)\n                \n    elif nuke.thisKnob().name() == 'font_size':\n        fontSize = node.knob('font_size').value()\n        node.knob('note_font_size').setValue(fontSize)\nexcept:\n    pass"
 tile_color 0x3b2d33ff
 note_font_size 120
 xpos -2176
 ypos 3905
 bookmark false
 bdwidth 920
 bdheight 485
 z_order 2
 addUserKnob {20 F_VFX l BackdropNode}
 addUserKnob {43 text l Text}
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 80
 addUserKnob {4 position l "" -STARTLINE M {Left Center}}
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.77, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.1, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {26 Ftools l "" +STARTLINE T "<font color=\"#1C1C1C\"> Franklin VFX - 2018"}
}
BackdropNode {
 inputs 0
 name BKD_CHECK_DENOISE
 tile_color 0x41826fff
 label "<center> REDUCE_NOISE SETTING"
 note_font_size 50
 xpos -2304
 ypos -1808
 bookmark false
 bdwidth 517
 bdheight 555
 z_order 3
}
BackdropNode {
 inputs 0
 name BKD_CHECK_DGC
 tile_color 0xad9c70ff
 label "<center>CONFO EDIT"
 note_font_size 50
 xpos -4048
 ypos -1824
 bookmark false
 bdwidth 1563
 bdheight 1847
 z_order 3
}
BackdropNode {
 inputs 0
 name BackdropNode14
 knobChanged "try:\n    listenedKnobs = \['text', 'position', 'name']\n    node = nuke.thisNode()\n    name = node.knob('name').value()\n    text = node.knob('text').value()\n    position = node.knob('position').value()\n    position = \"<\" + position + \">\"\n    label = node.knob('label').value()\n    \n    if nuke.thisKnob().name() in listenedKnobs:\n        if text == \"\":\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue()\n            else:\n                node.knob('label').setValue(position + name)\n        else:\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue(text)\n            else:\n                node.knob('label').setValue(position + text)\n                \n    elif nuke.thisKnob().name() == 'font_size':\n        fontSize = node.knob('font_size').value()\n        node.knob('note_font_size').setValue(fontSize)\nexcept:\n    pass"
 tile_color 0x2d3c35ff
 label <Center>compare
 note_font_size 50
 note_font_color 0xffffffff
 xpos -2901
 ypos -507
 bookmark false
 bdwidth 325
 bdheight 474
 z_order 4
 addUserKnob {20 F_VFX l BackdropNode}
 addUserKnob {43 text l Text}
 text compare
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 50
 addUserKnob {4 position l "" -STARTLINE M {Left Center}}
 position Center
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.77, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.1, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {26 Ftools l "" +STARTLINE T "<font color=\"#1C1C1C\"> Franklin VFX - 2018"}
}
BackdropNode {
 inputs 0
 name BKD_KRONOS_DGC
 label <center>MiKRONOS
 note_font_size 40
 xpos -3648
 ypos -1346
 bdwidth 300
 bdheight 231
 z_order 5
}
BackdropNode {
 inputs 0
 name BKD_MIRROR_DGC
 label <center>MIRROR
 note_font_size 40
 xpos -3651
 ypos -1084
 bdwidth 307
 bdheight 188
 z_order 5
}
BackdropNode {
 inputs 0
 name BKD_REPO_DGC
 label <center>REPO
 note_font_size 40
 xpos -3652
 ypos -832
 bdwidth 309
 bdheight 524
 z_order 5
}
Dot {
 inputs 0
 name Anchor_PLATE_INPUT
 tile_color 0x3b8841ff
 label " \[regsub Anchor_ \[value name] \"\"] "
 note_font_size 20
 xpos -2118
 ypos -2796
 addUserKnob {20 Options}
 addUserKnob {22 createLink l "Create link" -STARTLINE T "anchorLink.AnchorDot.createLink(nuke.thisNode(), interactive=True)"}
 addUserKnob {26 Family}
 addUserKnob {22 rename l Rename -STARTLINE T anchorLink.AnchorDot.renameByFamily(nuke.thisNode())}
 addUserKnob {22 select l Select -STARTLINE T anchorLink.AnchorDot.selectByFamily(nuke.thisNode())}
}
set N45137200 [stack 0]
Dot {
 name Link_PLATE_INPUT
 tile_color 0x3b8841ff
 label "  Connected to :\n  \[regsub Anchor_ \[value Tlink] \"\"]"
 note_font_size 20
 note_font_color 0xb26300ff
 xpos -2118
 ypos -2736
 hide_input true
 addUserKnob {20 Options}
 addUserKnob {1 Tlink l "" +STARTLINE +HIDDEN}
 Tlink Anchor_PLATE_INPUT
 addUserKnob {22 duplicate l "Duplicate Link" -STARTLINE T anchorLink.LinkDot.duplicateLink(nuke.thisNode())}
 addUserKnob {22 connect l "Reconnect Selection" -STARTLINE T anchorLink.LinkDot.connect(nuke.selectedNodes())}
 addUserKnob {26 "Family OP"}
 addUserKnob {22 rename l Rename -STARTLINE T anchorLink.AnchorDot.renameByFamily(nuke.thisNode())}
 addUserKnob {22 select l Select -STARTLINE T anchorLink.AnchorDot.selectByFamily(nuke.thisNode())}
 addUserKnob {26 "Graph UI"}
 addUserKnob {22 showHide l "Show / hide inputs ALL" -STARTLINE T anchorLink.LinkDot.toggleInputs(nuke.allNodes('Dot'))}
 addUserKnob {26 "Navigate to"}
 addUserKnob {22 navParent l Anchor -STARTLINE T anchorLink.LinkDot.navToParent(nuke.thisNode())}
 addUserKnob {22 navCurrent l Link -STARTLINE T anchorLink.LinkDot.navToCurrent(nuke.thisNode())}
}
Read {
 inputs 0
 file_type exr
 file /s/prods/colds/sequence/0089_mou/0089_mou_0010/common/footage/0089_mou_0010-src-master01-v001-acescg-exr/0089_mou_0010-src-master01-v001-acescg.%04d.exr
 first 977
 last 1458
 origfirst 977
 origlast 1458
 colorspace acescg
 name MikRead
 tile_color 0xff0001
 xpos -3841
 ypos -2836
 addUserKnob {20 mikRead}
 addUserKnob {1 mikData l "" +STARTLINE +HIDDEN}
 mikData "\{\"type_source_selected\": \"footage\", \"sources\": \{\"harmony_asset\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"harmony_render_source\": \{\"cache\": \"\", \"values\": \[\"ha\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"vzero\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Asset\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"sg_asset_type\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"image_ext\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"nuke\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[], \"selected\": -1\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"nk\", \"values\": \[\"nk\", \"nkmatte\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"htoa\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[], \"selected\": -1\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[], \"selected\": -1\}, \"extra_variant\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"houdini_render_source\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_aov\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"image_ext\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"assets\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"vzero\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"nk\", \"values\": \[\"nk\", \"nkmatte\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Asset\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"sg_asset_type\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"photoshop_asset\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"vzero\", \"values\": \[], \"selected\": -1\}, \"extension\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Asset\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"sg_asset_type\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"photoshop_render_source\": \{\"cache\": \"\", \"values\": \[\"ps\"], \"selected\": 0\}\}, \"mtoa\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[], \"selected\": -1\}, \"render_layer\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"\", \"values\": \[\"mtoa\"], \"selected\": 0\}, \"render_aov\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"image_ext\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"mtoa_asset\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"vzero\", \"values\": \[], \"selected\": -1\}, \"render_layer\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"\", \"values\": \[\"mtoa\"], \"selected\": 0\}, \"render_aov\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Asset\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"sg_asset_type\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"image_ext\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"footage\": \{\"Task\": \{\"cache\": \"src\", \"values\": \[\"src\"], \"selected\": 0\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[\"0089_mou_0010\"], \"selected\": 0\}, \"extension\": \{\"cache\": \"exr\", \"values\": \[\"exr\"], \"selected\": 0\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[\"0089_mou\"], \"selected\": 0\}, \"colorspace\": \{\"cache\": \"acescg\", \"values\": \[\"acescg\"], \"selected\": 0\}, \"variant\": \{\"cache\": \"master01\", \"values\": \[\"master01\"], \"selected\": 0\}, \"version\": \{\"cache\": 1, \"values\": \[1], \"selected\": 0\}\}, \"htoa_asset\": \{\"Task\": \{\"cache\": \"vzero\", \"values\": \[], \"selected\": -1\}, \"extra_variant\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"houdini_render_source\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_aov\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Asset\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"sg_asset_type\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"image_ext\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"EZPlayBlast\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"blast\", \"values\": \[\"blast\"], \"selected\": 0\}, \"camera\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"image_ext\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"elements_asset\": \{\"Task\": \{\"cache\": \"vzero\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"nkelem\", \"values\": \[\"nkelem\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Asset\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"sg_asset_type\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"flame\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"flame_render_source\": \{\"cache\": \"\", \"values\": \[\"fl\"], \"selected\": 0\}, \"ext_render_flame\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"photoshop_shot\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[], \"selected\": -1\}, \"extension\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"photoshop_render_source\": \{\"cache\": \"\", \"values\": \[\"ps\"], \"selected\": 0\}\}, \"clarisse\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"clarisse_layer\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[], \"selected\": -1\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"clarisse_image\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"\", \"values\": \[\"clarisse\"], \"selected\": 0\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"ext_render_clarisse\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"elements_shot\": \{\"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[], \"selected\": -1\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"nkelem\", \"values\": \[\"nkelem\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"harmony_shot\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"harmony_render_source\": \{\"cache\": \"\", \"values\": \[\"ha\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[], \"selected\": -1\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"image_ext\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}\}\}"
 addUserKnob {52 mikReadUI l "" -STARTLINE T __import__('mikIO.ui.nuke.customKnobs.mikIOKnob').ui.nuke.customKnobs.mikIOKnob.MikReadKnob()}
}
Dot {
 name Anchor_MASTER_INPUT
 tile_color 0x415939ff
 label " \[regsub Anchor_ \[value name] \"\"] "
 note_font_size 20
 xpos -3801
 ypos -2736
 addUserKnob {20 Options}
 addUserKnob {22 createLink l "Create link" -STARTLINE T "anchorLink.AnchorDot.createLink(nuke.thisNode(), interactive=True)"}
 addUserKnob {26 Family}
 addUserKnob {22 rename l Rename -STARTLINE T anchorLink.AnchorDot.renameByFamily(nuke.thisNode())}
 addUserKnob {22 select l Select -STARTLINE T anchorLink.AnchorDot.selectByFamily(nuke.thisNode())}
 addUserKnob {22 recolor l "Recolor children" -STARTLINE T anchorLink.AnchorDot.changeColorByFamily(nuke.thisNode())}
}
set N45135600 [stack 0]
Dot {
 name Link_src-master01-v001
 tile_color 0x415939ff
 label "  Connected to :\n  \[regsub Anchor_ \[value Tlink] \"\"]\n\n"
 note_font_size 20
 note_font_color 0xb26300ff
 xpos -3801
 ypos -2646
 hide_input true
 addUserKnob {20 Options}
 addUserKnob {1 Tlink l "" +STARTLINE +HIDDEN}
 Tlink Anchor_MASTER_INPUT
 addUserKnob {22 duplicate l "Duplicate Link" -STARTLINE T anchorLink.LinkDot.duplicateLink(nuke.thisNode())}
 addUserKnob {22 connect l "Reconnect Selection" -STARTLINE T anchorLink.LinkDot.connect(nuke.selectedNodes())}
 addUserKnob {26 "Family OP"}
 addUserKnob {22 rename l Rename -STARTLINE T anchorLink.AnchorDot.renameByFamily(nuke.thisNode())}
 addUserKnob {22 select l Select -STARTLINE T anchorLink.AnchorDot.selectByFamily(nuke.thisNode())}
 addUserKnob {22 recolor l "Recolor from parent" -STARTLINE T anchorLink.AnchorDot.changeColorByFamily(nuke.thisNode())}
 addUserKnob {26 "Graph UI"}
 addUserKnob {22 showHide l "Show / hide inputs ALL" -STARTLINE T anchorLink.LinkDot.toggleInputs(nuke.allNodes('Dot'))}
 addUserKnob {26 "Navigate to"}
 addUserKnob {22 navParent l Anchor -STARTLINE T anchorLink.LinkDot.navToParent(nuke.thisNode())}
 addUserKnob {22 navCurrent l Link -STARTLINE T anchorLink.LinkDot.navToCurrent(nuke.thisNode())}
}
StickyNote {
 inputs 0
 name NOTES_RANGE
 tile_color 0x601515ff
 label "\n  frame range = \[python int(nuke.root().knob('first_frame').value())] - \[python int(nuke.root().knob('last_frame').value())] \n"
 note_font_size 50
 xpos -4179
 ypos -3534
}
StickyNote {
 inputs 0
 name StickyNote9
 tile_color 0xfffd00ff
 label 3)
 note_font_size 120
 xpos -2105
 ypos -1988
}
push $N45135600
Dot {
 name Link_src-master01-v1
 tile_color 0x415939ff
 label "  Connected to :\n  \[regsub Anchor_ \[value Tlink] \"\"]\n\n"
 note_font_size 20
 note_font_color 0xb26300ff
 xpos -3504
 ypos -1716
 hide_input true
 addUserKnob {20 Options}
 addUserKnob {1 Tlink l "" +STARTLINE +HIDDEN}
 Tlink Anchor_MASTER_INPUT
 addUserKnob {22 duplicate l "Duplicate Link" -STARTLINE T anchorLink.LinkDot.duplicateLink(nuke.thisNode())}
 addUserKnob {22 connect l "Reconnect Selection" -STARTLINE T anchorLink.LinkDot.connect(nuke.selectedNodes())}
 addUserKnob {26 "Family OP"}
 addUserKnob {22 rename l Rename -STARTLINE T anchorLink.AnchorDot.renameByFamily(nuke.thisNode())}
 addUserKnob {22 select l Select -STARTLINE T anchorLink.AnchorDot.selectByFamily(nuke.thisNode())}
 addUserKnob {22 recolor l "Recolor from parent" -STARTLINE T anchorLink.AnchorDot.changeColorByFamily(nuke.thisNode())}
 addUserKnob {26 "Graph UI"}
 addUserKnob {22 showHide l "Show / hide inputs ALL" -STARTLINE T anchorLink.LinkDot.toggleInputs(nuke.allNodes('Dot'))}
 addUserKnob {26 "Navigate to"}
 addUserKnob {22 navParent l Anchor -STARTLINE T anchorLink.LinkDot.navToParent(nuke.thisNode())}
 addUserKnob {22 navCurrent l Link -STARTLINE T anchorLink.LinkDot.navToCurrent(nuke.thisNode())}
}
Dot {
 name Dot15
 xpos -3504
 ypos -1596
}
set N45113200 [stack 0]
Dot {
 name Dot13
 xpos -3207
 ypos -1596
}
ViewMetaData {
 metadatafilter timecode
 name ViewMetaData1
 label "<center><font color=darkred>\[metadata input/timecode]\n<font color=black>TimeCode\n"
 note_font_size 15
 xpos -3241
 ypos -1541
}
Scene {
 inputs 0
 name retime_scene
 xpos -2802
 ypos 1920
}
WriteGeo {
 file "/s/prods/regnanim/sequence/\[value varSeq]/\[value varShot]/common/camera/retime/\[value varShot]-retime-v001.abc"
 file_type abc
 writeGeometries false
 writePointClouds false
 writeAxes false
 name WriteGeo_Retime
 xpos -2812
 ypos 2084
 disable {{"!(RETIME_ON_OFF.ChoiceRetime && CG_ON_OFF.CG_on_off)"}}
 addUserKnob {20 varTab l variable}
 addUserKnob {2 varSeq}
 varSeq "\[lindex \[split \[split \[split \[file tail \[value root.name]] / ] - ] _ ] 0]"
 addUserKnob {1 varShot}
 varShot "\[lindex \[split \[split \[file tail \[value root.name]] / ] - ] 0]"
}
StickyNote {
 inputs 0
 name StickyNote3
 tile_color 0x9d6600ff
 label "<font size = 5>\nDesormais automatique mais au besoin pour sortir \nà la main suivre la procédure ci-dessus:\n\n<font size = 2>\nSelectionner les curves + click droit\nFile/Export Ascii/\n<font size = 2>\n\"t\" doit être setter sur 1\n\"lookup\" doit être setter sur 2\n<font size = 2>\nPathType:\n???/???_???/common/retime/ASCII/???_???-retime-v001.ascii\n\n"
 note_font_size 15
 note_font_color 0xffffffff
 xpos -1532
 ypos 1716
}
StickyNote {
 inputs 0
 name StickyNote5
 tile_color 0xfffd00ff
 label 4)
 note_font_size 120
 xpos -1247
 ypos -1988
}
StickyNote {
 inputs 0
 name StickyNote11
 tile_color 0xfffd00ff
 label 2)
 note_font_size 120
 xpos -3425
 ypos -2018
}
StickyNote {
 inputs 0
 name StickyNote6
 tile_color 0xfffd00ff
 label 1)
 note_font_size 120
 xpos -4679
 ypos -2018
}
push $N45113200
Remove {
 operation keep
 channels rgb
 name Remove1
 label "channels : \[value channels]"
 xpos -3538
 ypos -1546
}
Text2 {
 font_size_toolbar 100
 font_width_toolbar 100
 font_height_toolbar 100
 message "\[metadata input/timecode]\n\[frame]"
 old_message {{49 53 58 50 55 58 52 55 58 48 49 10 49 48 57 50}
   }
 old_expression_markers {{0 10 12 15}
   }
 box {2903.5 981.5 2904.5 982.5}
 xjustify center
 yjustify center
 transforms {{0 2}
   }
 cursor_position 32
 font {{ Utopia : Bold : UtopiaBold.pfa : 0 }}
 scale {1 1}
 cursor_initialised true
 initial_cursor_position {{2904 982}
   }
 group_animations {{0} imported: 0 selected: items: "root transform"}
 animation_layers {{1 11 {input.width/2} {input.height/2} 0 0 {"1-(\[value MirrorConfoDGC.flop]*2)"} {"1-(\[value MirrorConfoDGC.flip]*2)"} 0 0 0 0}
   }
 name TC
 note_font_size 20
 xpos -3538
 ypos -1484
 disable {{"! \$gui"}}
}
set N450e6b00 [stack 0]
Dot {
 name Dot23
 xpos -3603
 ypos -1476
}
Group {
 name Alpha_Edge
 xpos -3637
 ypos -1450
}
 Input {
  inputs 0
  name Input1
  xpos -916
  ypos -571
 }
 Dilate {
  channels alpha
  size 1
  name Dilate2
  label "size :\[value size]"
  xpos -916
  ypos -531
 }
 Blur {
  channels alpha
  size 3
  name Blur1
  label "size :\[value size]"
  xpos -916
  ypos -462
 }
 ColorLookup {
  channels alpha
  lut {master {}
    red {}
    green {}
    blue {}
    alpha {curve C k 0 s0 x0.400000006 1 s0 x0.6000000238 1 s0 x1 0 s0}}
  name ColorLookup1
  xpos -916
  ypos -405
 }
 Dilate {
  channels alpha
  size 1
  name Dilate1
  label "size :\[value size]"
  xpos -916
  ypos -361
 }
 Output {
  name Output1
  xpos -916
  ypos -261
 }
end_group
Dot {
 name Dot21
 xpos -3603
 ypos -1416
}
push $N450e6b00
Grade {
 inputs 1+1
 white 0
 black_clamp false
 name Grade1
 label "Channels :\[value channels]"
 xpos -3538
 ypos -1426
}
Kronos {
 input.first {{this.first}}
 input.last {{this.last}}
 retimedChannels {{{this.channelslink}}}
 interpolation {{this.OvInterpolation x1330 1 x1425 0}}
 timing2 {{this.OvTiming}}
 timingOutputSpeed {{this.OvOutputSpeed}}
 timingInputSpeed {{this.OvInputSpeed}}
 timingFrame2 {{this.OvTimingFrame2}}
 motionEstimation {{this.motionEstimationLink}}
 vectorDetailReg {{this.VectorDetail}}
 strengthReg {{this.Strength}}
 resampleType {{this.Filters}}
 name KronosParent
 knobChanged "from vfxNukeScripts.python import miKronos; miKronos.knobChanged()"
 label "<font color= darkred>\[value interpolation]\n<font color= yellow>MiKronos"
 xpos -3538
 ypos -1232
 disable {{!RETIME_ON_OFF.ChoiceRetime x1002 0}}
 addUserKnob {20 tabOverride l override}
 addUserKnob {3 first}
 addUserKnob {3 last -STARTLINE}
 last 1
 addUserKnob {22 reset -STARTLINE T "nuke.thisNode().knob('first').setValue(int(nuke.root()\['first_frame'].value()))\nnuke.thisNode().knob('last').setValue(int(nuke.root()\['last_frame'].value()))"}
 addUserKnob {68 OvInterpolation l Method M {Frame Blend Motion "" "" ""}}
 OvInterpolation Motion
 addUserKnob {4 OvTiming l Timing M {"Output Speed" "Input Speed" Frame}}
 OvTiming Frame
 addUserKnob {7 OvOutputSpeed l OutputSpeed +DISABLED R 0.01 5}
 OvOutputSpeed 1
 addUserKnob {7 OvInputSpeed l "Input Speed" +DISABLED R 0.01 5}
 OvInputSpeed 0.5
 addUserKnob {7 OvTimingFrame2 l Frame R 0 1000}
 OvTimingFrame2 1001
 addUserKnob {4 motionEstimationLink M {Regularized Local}}
 addUserKnob {7 VectorDetail}
 VectorDetail 0.3
 addUserKnob {7 Strength R 0 2}
 Strength 1.5
 addUserKnob {4 Filters M {Bilinear Lanczos4 Lanczos6}}
 addUserKnob {7 OvTimingFrameDuplicate +INVISIBLE}
}
Mirror2 {
 name MirrorConfoDGC
 knobChanged "m=nuke.thisNode()\nm\['flip'].setEnabled(False)\nm\['flop'].setEnabled(False)"
 label "<font size = 5><font color = white>flip(x) = <font color = yellow>\[if \{\[value flop] \} \{return MIRROR\} \{return NONE\}  ]\n<font color = white>flop(y) =  <font color = yellow>\[if \{\[value flip] \} \{return MIRROR\} \{return NONE\}  ]\n\n\n"
 note_font_size 12
 xpos -3538
 ypos -995
 disable {{"!(\[value flip] || \[value flop])"}}
}
Transform {
 translate {{curve L x1001 0 x1434 94.92} {curve L x1001 0 x1434 0}}
 scale {{curve L x1001 1 x1434 1.2} {curve L x1001 1 x1434 1.2}}
 center {791 2304}
 name Transform1
 xpos -3542
 ypos -712
}
Dot {
 name Dot1
 xpos -3504
 ypos -186
}
LiveGroup {
 modified true
 version 83
 file /s/prods/colds/sequence/common/confoCadre/ConfoCadre_01-v001.nk~
 advanced 1
 name ASSET_CONFOCADRE
 note_font_size 12
 note_font_color 0xffffffff
 xpos -3340
 ypos -197
 disable {{"!\[file exists \[value file]]"}}
 addUserKnob {20 varTab l variable +INVISIBLE}
 addUserKnob {1 varProd}
 varProd colds
 addUserKnob {1 varSeq}
 varSeq 0089_mou
 addUserKnob {1 varShot}
 varShot 0089_mou_0010
}
 Input {
  inputs 0
  name Input1
  xpos -150
  ypos 150
 }
 Crop {
  box {416.0100098 0.01000022888 4192.009766 1582}
  reformat true
  crop false
  name Crop3
  xpos -150
  ypos 230
 }
 Reformat {
  black_outside true
  pbb true
  name Reformat6
  xpos -150
  ypos 310
 }
 Output {
  name Output1
  xpos -150
  ypos 390
 }
end_group
Reformat {
 type "to box"
 box_width {{parent.Reformat2.box_width}}
 box_height {{parent.Reformat2.box_height}}
 box_fixed true
 name Reformat1
 label "Resize: \[value resize] - center: \[value center]\nFilter: \[value filter]"
 xpos -2930
 ypos -203
}
Read {
 inputs 0
 file_type jpeg
 file /s/prods/colds/sequence/0089_mou/0089_mou_0010/common/footage/0089_mou_0010-dgc-base-v001-rec709-jpg/0089_mou_0010-dgc-base-v001-rec709.%04d.jpg
 first 1001
 last 1434
 origfirst 1001
 origlast 1434
 colorspace rec709
 name MikRead1
 tile_color 0xff0001
 xpos -3016
 ypos -2956
 addUserKnob {20 mikRead}
 addUserKnob {1 mikData l "" +STARTLINE +HIDDEN}
 mikData "\{\"type_source_selected\": \"footage\", \"sources\": \{\"harmony_asset\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"harmony_render_source\": \{\"cache\": \"\", \"values\": \[\"ha\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"vzero\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Asset\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"sg_asset_type\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"image_ext\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"nuke\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[], \"selected\": -1\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"nk\", \"values\": \[\"nk\", \"nkmatte\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"htoa\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[], \"selected\": -1\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[], \"selected\": -1\}, \"extra_variant\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"houdini_render_source\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_aov\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"image_ext\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"assets\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"vzero\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"nk\", \"values\": \[\"nk\", \"nkmatte\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Asset\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"sg_asset_type\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"photoshop_asset\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"vzero\", \"values\": \[], \"selected\": -1\}, \"extension\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Asset\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"sg_asset_type\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"photoshop_render_source\": \{\"cache\": \"\", \"values\": \[\"ps\"], \"selected\": 0\}\}, \"mtoa\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[], \"selected\": -1\}, \"render_layer\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"\", \"values\": \[\"mtoa\"], \"selected\": 0\}, \"render_aov\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"image_ext\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"mtoa_asset\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"vzero\", \"values\": \[], \"selected\": -1\}, \"render_layer\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"\", \"values\": \[\"mtoa\"], \"selected\": 0\}, \"render_aov\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Asset\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"sg_asset_type\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"image_ext\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"footage\": \{\"Task\": \{\"cache\": \"dgc\", \"values\": \[\"dgc\"], \"selected\": 0\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[\"0089_mou_0010\"], \"selected\": 0\}, \"extension\": \{\"cache\": \"jpg\", \"values\": \[\"jpg\"], \"selected\": 0\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[\"0089_mou\"], \"selected\": 0\}, \"colorspace\": \{\"cache\": \"rec709\", \"values\": \[\"rec709\"], \"selected\": 0\}, \"variant\": \{\"cache\": \"base\", \"values\": \[\"base\"], \"selected\": 0\}, \"version\": \{\"cache\": 1, \"values\": \[1], \"selected\": 0\}\}, \"htoa_asset\": \{\"Task\": \{\"cache\": \"vzero\", \"values\": \[], \"selected\": -1\}, \"extra_variant\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"houdini_render_source\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_aov\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Asset\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"sg_asset_type\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"image_ext\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"EZPlayBlast\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"blast\", \"values\": \[\"blast\"], \"selected\": 0\}, \"camera\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"image_ext\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"elements_asset\": \{\"Task\": \{\"cache\": \"vzero\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"nkelem\", \"values\": \[\"nkelem\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Asset\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"sg_asset_type\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"flame\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"flame_render_source\": \{\"cache\": \"\", \"values\": \[\"fl\"], \"selected\": 0\}, \"ext_render_flame\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"photoshop_shot\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[], \"selected\": -1\}, \"extension\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"photoshop_render_source\": \{\"cache\": \"\", \"values\": \[\"ps\"], \"selected\": 0\}\}, \"clarisse\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"clarisse_layer\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[], \"selected\": -1\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"clarisse_image\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"\", \"values\": \[\"clarisse\"], \"selected\": 0\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"ext_render_clarisse\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"elements_shot\": \{\"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[], \"selected\": -1\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"nkelem\", \"values\": \[\"nkelem\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"harmony_shot\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"harmony_render_source\": \{\"cache\": \"\", \"values\": \[\"ha\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[], \"selected\": -1\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"image_ext\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}\}\}"
 addUserKnob {52 mikReadUI l "" -STARTLINE T __import__('mikIO.ui.nuke.customKnobs.mikIOKnob').ui.nuke.customKnobs.mikIOKnob.MikReadKnob()}
}
Dot {
 name Anchor_DGC_INPUT
 tile_color 0x415939ff
 label " \[regsub Anchor_ \[value name] \"\"] "
 note_font_size 20
 xpos -2976
 ypos -2856
 addUserKnob {20 Options}
 addUserKnob {22 createLink l "Create link" -STARTLINE T "anchorLink.AnchorDot.createLink(nuke.thisNode(), interactive=True)"}
 addUserKnob {26 Family}
 addUserKnob {22 rename l Rename -STARTLINE T anchorLink.AnchorDot.renameByFamily(nuke.thisNode())}
 addUserKnob {22 select l Select -STARTLINE T anchorLink.AnchorDot.selectByFamily(nuke.thisNode())}
 addUserKnob {22 recolor l "Recolor children" -STARTLINE T anchorLink.AnchorDot.changeColorByFamily(nuke.thisNode())}
 addUserKnob {20 variable}
 addUserKnob {1 varDGC}
 varDGC "\[lrange \[split \[value input.file] \"/\"] 9 end-1]"
}
set N4524e400 [stack 0]
Dot {
 name Link_Link_MASTER_INPUT1
 tile_color 0x415939ff
 label "  Connected to :\n  \[regsub Anchor_ \[value Tlink] \"\"]\n\n"
 note_font_size 20
 note_font_color 0xb26300ff
 xpos -2745
 ypos -276
 hide_input true
 addUserKnob {20 Options}
 addUserKnob {1 Tlink l "" +STARTLINE +HIDDEN}
 Tlink Anchor_DGC_INPUT
 addUserKnob {22 duplicate l "Duplicate Link" -STARTLINE T anchorLink.LinkDot.duplicateLink(nuke.thisNode())}
 addUserKnob {22 connect l "Reconnect Selection" -STARTLINE T anchorLink.LinkDot.connect(nuke.selectedNodes())}
 addUserKnob {26 "Family OP"}
 addUserKnob {22 rename l Rename -STARTLINE T anchorLink.AnchorDot.renameByFamily(nuke.thisNode())}
 addUserKnob {22 select l Select -STARTLINE T anchorLink.AnchorDot.selectByFamily(nuke.thisNode())}
 addUserKnob {22 recolor l "Recolor from parent" -STARTLINE T anchorLink.AnchorDot.changeColorByFamily(nuke.thisNode())}
 addUserKnob {26 "Graph UI"}
 addUserKnob {22 showHide l "Show / hide inputs ALL" -STARTLINE T anchorLink.LinkDot.toggleInputs(nuke.allNodes('Dot'))}
 addUserKnob {26 "Navigate to"}
 addUserKnob {22 navParent l Anchor -STARTLINE T anchorLink.LinkDot.navToParent(nuke.thisNode())}
 addUserKnob {22 navCurrent l Link -STARTLINE T anchorLink.LinkDot.navToCurrent(nuke.thisNode())}
}
Merge2 {
 inputs 2
 operation difference
 name Check_DGC1
 xpos -2779
 ypos -190
}
Dot {
 name Dot14
 xpos -2745
 ypos -126
}
TimeWarp {
 inputs 0
 lookup {{parent.KronosParent.timingFrame2}}
 time ""
 filter none
 name TimeWarp_ExportAscii1
 label "<font color=red><b><center>lors de l'export\nlookup == 2\nt == 1"
 xpos -1261
 ypos 2091
 disable {{"!(RETIME_ON_OFF.ChoiceRetime && CG_ON_OFF.CG_on_off)"}}
 addUserKnob {20 t_forExport}
 addUserKnob {3 t}
 t {{t}}
}
StickyNote {
 inputs 0
 name StickyNote8
 label "Si node \"MikWrite\" absent,\nBrancher le \"out\" par deflaut"
 note_font_size 30
 xpos -3241
 ypos 5973
}
push $N4524e400
Dot {
 name Link_Link_MASTER_INPUT
 tile_color 0x415939ff
 label "  Connected to :\n  \[regsub Anchor_ \[value Tlink] \"\"]\n\n"
 note_font_size 20
 note_font_color 0xb26300ff
 xpos -2976
 ypos -2796
 hide_input true
 addUserKnob {20 Options}
 addUserKnob {1 Tlink l "" +STARTLINE +HIDDEN}
 Tlink Anchor_DGC_INPUT
 addUserKnob {22 duplicate l "Duplicate Link" -STARTLINE T anchorLink.LinkDot.duplicateLink(nuke.thisNode())}
 addUserKnob {22 connect l "Reconnect Selection" -STARTLINE T anchorLink.LinkDot.connect(nuke.selectedNodes())}
 addUserKnob {26 "Family OP"}
 addUserKnob {22 rename l Rename -STARTLINE T anchorLink.AnchorDot.renameByFamily(nuke.thisNode())}
 addUserKnob {22 select l Select -STARTLINE T anchorLink.AnchorDot.selectByFamily(nuke.thisNode())}
 addUserKnob {22 recolor l "Recolor from parent" -STARTLINE T anchorLink.AnchorDot.changeColorByFamily(nuke.thisNode())}
 addUserKnob {26 "Graph UI"}
 addUserKnob {22 showHide l "Show / hide inputs ALL" -STARTLINE T anchorLink.LinkDot.toggleInputs(nuke.allNodes('Dot'))}
 addUserKnob {26 "Navigate to"}
 addUserKnob {22 navParent l Anchor -STARTLINE T anchorLink.LinkDot.navToParent(nuke.thisNode())}
 addUserKnob {22 navCurrent l Link -STARTLINE T anchorLink.LinkDot.navToCurrent(nuke.thisNode())}
}
Reformat {
 type "to box"
 box_width {{width}}
 box_height {{height}}
 box_fixed true
 name Reformat2
 label "RECUP FORMAT DGC"
 note_font_color 0xffffffff
 xpos -3010
 ypos -2746
}
push $N45135600
Dot {
 name Link_src-master01-v4
 tile_color 0x415939ff
 label "  Connected to :\n  \[regsub Anchor_ \[value Tlink] \"\"]\n\n"
 note_font_size 20
 note_font_color 0xb26300ff
 xpos -4065
 ypos 3594
 hide_input true
 addUserKnob {20 Options}
 addUserKnob {1 Tlink l "" +STARTLINE +HIDDEN}
 Tlink Anchor_MASTER_INPUT
 addUserKnob {22 duplicate l "Duplicate Link" -STARTLINE T anchorLink.LinkDot.duplicateLink(nuke.thisNode())}
 addUserKnob {22 connect l "Reconnect Selection" -STARTLINE T anchorLink.LinkDot.connect(nuke.selectedNodes())}
 addUserKnob {26 "Family OP"}
 addUserKnob {22 rename l Rename -STARTLINE T anchorLink.AnchorDot.renameByFamily(nuke.thisNode())}
 addUserKnob {22 select l Select -STARTLINE T anchorLink.AnchorDot.selectByFamily(nuke.thisNode())}
 addUserKnob {22 recolor l "Recolor from parent" -STARTLINE T anchorLink.AnchorDot.changeColorByFamily(nuke.thisNode())}
 addUserKnob {26 "Graph UI"}
 addUserKnob {22 showHide l "Show / hide inputs ALL" -STARTLINE T anchorLink.LinkDot.toggleInputs(nuke.allNodes('Dot'))}
 addUserKnob {26 "Navigate to"}
 addUserKnob {22 navParent l Anchor -STARTLINE T anchorLink.LinkDot.navToParent(nuke.thisNode())}
 addUserKnob {22 navCurrent l Link -STARTLINE T anchorLink.LinkDot.navToCurrent(nuke.thisNode())}
}
set N4522ab00 [stack 0]
LiveGroup {
 modified true
 version 125
 file /s/prods/colds/sequence/0089_mou/0089_mou_0010/common/mirror/0089_mou_0010-mirror-v001.nk
 advanced 1
 name ASSET_MIRROR
 knobChanged "m=nuke.thisNode()\nm\['publish'].setVisible(False)\nm\['makeEditable'].setVisible(False)\nm\['file'].setVisible(False)\nm\['open'].setVisible(False)\nm\['render'].setVisible(False)\nm\['reading'].setVisible(False)\nm\['on_error'].setVisible(False)\nm\['reload_write'].setVisible(False)\nm\['advanced'].setVisible(False)\nm\['varProd'].setVisible(False)\nm\['varSeq'].setVisible(False)\nm\['varShot'].setVisible(False)"
 label "<font color = darkblue> <b><center><font size = 6>2D\n<font size = 4><font color = white>flip(x) =<font color = yellow>\[if \{\[value MirrorConfoDGC_DUPLICATE.flop] \} \{return MIRROR\} \{return NONE\}  ]\n<font color = white>flop(y) =  <font color = yellow>\[if \{\[value MirrorConfoDGC_DUPLICATE.flip] \} \{return MIRROR\} \{return NONE\}  ]"
 note_font_size 12
 note_font_color 0xffffffff
 xpos -3967
 ypos 3633
 addUserKnob {20 Mode l "MODE Users/Leads"}
 addUserKnob {4 ModeChoice l "Mode Choice" M {USERS LEADS}}
 ModeChoice USERS
 addUserKnob {20 varTab l variable}
 addUserKnob {1 varProd +HIDDEN}
 varProd colds
 addUserKnob {1 varSeq +HIDDEN}
 varSeq 0089_mou
 addUserKnob {1 varShot +HIDDEN}
 varShot 0089_mou_0010
}
end_group
Dot {
 name Dot22
 xpos -3933
 ypos 3774
}
push $N4522ab00
Switch {
 inputs 2
 which {{"\[numvalue MIRROR_ON_OFF.CG_Mirror]"}}
 name Switch1
 tile_color 0x93493cff
 label "\[if \{\[value which]!=\"0\"\} \{return \"\[knob this.tile_color 0x3c9346ff]\"\}  \{return \"\[knob this.tile_color 0x93493cff]\"\}]\[value which]"
 xpos -4099
 ypos 3764
}
LiveGroup {
 version 34
 file /s/prods/colds/sequence/0089_mou/0089_mou_0010/common/retime/0089_mou_0010-retime-v001.nk
 advanced 1
 name ASSET_RETIME
 knobChanged "m=nuke.thisNode()\nm\['publish'].setVisible(False)\nm\['makeEditable'].setVisible(False)\nm\['file'].setVisible(False)\nm\['open'].setVisible(False)\nm\['render'].setVisible(False)\nm\['reading'].setVisible(False)\nm\['on_error'].setVisible(False)\nm\['reload_write'].setVisible(False)\nm\['advanced'].setVisible(False)\nm\['varProd'].setVisible(False)\nm\['varSeq'].setVisible(False)\nm\['varShot'].setVisible(False)"
 note_font_size 12
 note_font_color 0xffffffff
 xpos -4099
 ypos 3853
 disable {{!RETIME_ON_OFF.ChoiceRetime}}
 addUserKnob {20 Mode l "MODE Users/Leads"}
 addUserKnob {4 ModeChoice l "Mode Choice" M {USERS LEADS}}
 ModeChoice USERS
 addUserKnob {20 varTab l variable}
 addUserKnob {1 varProd +HIDDEN}
 varProd colds
 addUserKnob {1 varSeq +HIDDEN}
 varSeq 0089_mou
 addUserKnob {1 varShot +HIDDEN}
 varShot 0089_mou_0010
}
 LiveInput {
  inputs 0
  liveGroup {{0}}
  shownWarningFile ""
  file ""
  name LiveInput1
  selected true
  xpos -3723
  ypos 1567
 }
 Dot {
  name Dot_Retime
  selected true
  xpos -3723
  ypos 1617
 }
 Output {
  name Output1
  selected true
  xpos -3723
  ypos 1667
 }
end_group
Log2Lin {
 operation lin2log
 name Log2Lin4
 xpos -4099
 ypos 3918
}
LiveGroup {
 modified true
 version 106
 file /s/prods/colds/sequence/0089_mou/0089_mou_0010/common/disto_node/0089_mou_0010-disto_node-v001.nk
 advanced 1
 name ASSET_DISTO
 knobChanged "m=nuke.thisNode()\nm\['publish'].setVisible(False)\nm\['makeEditable'].setVisible(False)\nm\['file'].setVisible(False)\nm\['open'].setVisible(False)\nm\['render'].setVisible(False)\nm\['reading'].setVisible(False)\nm\['on_error'].setVisible(False)\nm\['reload_write'].setVisible(False)\nm\['advanced'].setVisible(False)\nm\['varProd'].setVisible(False)\nm\['varSeq'].setVisible(False)\nm\['varShot'].setVisible(False)\nnuke.thisNode().begin()\nfor i in nuke.allNodes():\n    if i.knob('direction'):\n        nuke.thisNode().knob('direction').setValue(i.knob('direction').value())\n    if i.knob('filter'):\n        nuke.thisNode().knob('filter').setValue(i.knob('filter').value())\nnuke.thisNode().end()"
 label "<font color = yellow><b><font size = 6>\[value direction]\n\[value filter]"
 note_font_size 12
 note_font_color 0xffffffff
 xpos -4099
 ypos 3944
 disable {{"\[if \{\[file exists \[value file]] &&  \[value CG_ON_OFF.CG_on_off] != \"NONE\"\} \{return \"0\"\} \{return \"1\"\}]"}}
 addUserKnob {20 Settings l "DISTO Settings"}
 addUserKnob {1 direction}
 direction ""
 addUserKnob {1 filter}
 filter ""
 addUserKnob {20 Mode l "MODE Users/Leads"}
 addUserKnob {4 ModeChoice l "Mode Choice" M {USERS LEADS}}
 ModeChoice USERS
 addUserKnob {20 varTab l variable}
 addUserKnob {4 filter_disto l Filter M {impulse cubic Keys Simon Rifman Mitchell Parzen notch Lanczos4 Lanczos6 sinc4 ""}}
 filter_disto cubic
 addUserKnob {22 add_filter_1 l "Apply Filter" T "node = nuke.thisNode()\nfilter_value = node\[\"filter_disto\"].value()\nnode.begin()\nfor i in nuke.allNodes():\n    if i.knob(\"filter\"):\n        i.knob(\"filter\").setValue(filter_value)\nnode.end()\nnode\[\"filter\"].setValue(filter_value)" +STARTLINE}
 addUserKnob {1 varProd +HIDDEN}
 varProd colds
 addUserKnob {1 varSeq +HIDDEN}
 varSeq 0089_mou
 addUserKnob {1 varShot +HIDDEN}
 varShot 0089_mou_0010
}
end_group
Log2Lin {
 name Log2Lin3
 xpos -4099
 ypos 4043
}
Dot {
 name Dot10
 xpos -4065
 ypos 4134
}
set N451eb200 [stack 0]
OCIOLookTransform {
 in_colorspace scene_linear
 look SHOT_LOOK
 out_colorspace scene_linear
 key1 SHOT
 value1 "\[regexp -nocase -inline \{^\[a-z0-9_]+\} \[regexp -inline \{\[^/]+\$\} \[metadata input/filename]]]"
 name APPLY_SHOW_LUT
 xpos -4099
 ypos 4242
}
Reformat {
 type scale
 scale 0.5
 name Reformat3
 label "scale: \[value scale]"
 xpos -4099
 ypos 4304
}
set N451ea400 [stack 0]
ModifyMetaData {
 name ModifyMetaData1
 xpos -3967
 ypos 4400
}
StickyNote {
 inputs 0
 name StickyNote12
 label "MIKRONOS RETIME:\n\"Method\" like you want !\n\"Timing\" toujours en frame !!"
 note_font_size 20
 xpos -3419
 ypos -1235
}
NoOp {
 inputs 0
 name RETIME_ON_OFF
 tile_color 0x9999ff
 label "retime = <font color=yellow>\"\[value ChoiceRetime]\"\n\n\n"
 note_font_size 30
 note_font_color 0xffffffff
 xpos -4660
 ypos -1211
 addUserKnob {20 User}
 addUserKnob {4 ChoiceRetime l "Choice (retime)" M {NONE RETIME ""}}
}
NoOp {
 inputs 0
 name MIRROR_ON_OFF
 tile_color 0x9999ff
 label "flop (x) = <font color=yellow>\"\[value flopMirror]\"\n<font color=white> flip (y) = <font color=yellow>\"\[value flipMirror]\"\n<font color=white>work in CG scene = <font color=yellow> \[value CG_Mirror]"
 note_font_size 30
 note_font_color 0xffffffff
 xpos -4660
 ypos -914
 addUserKnob {20 User}
 addUserKnob {26 horriz l "horizontal (flop)"}
 addUserKnob {22 flopON l ON -STARTLINE T "nuke.thisNode().knob('flopMirror').setValue(1)\nnuke.toNode('MirrorConfoDGC').knob('flop').setValue(1)"}
 addUserKnob {22 flopOFF l OFF -STARTLINE T "nuke.thisNode().knob(\"flopMirror\").setValue(0)\nnuke.toNode('MirrorConfoDGC').knob('flop').setValue(0)"}
 addUserKnob {4 flopMirror l "flop mirror" +INVISIBLE M {NONE MIRROR "" "" "" "" "" "" ""}}
 addUserKnob {26 vertical l "vertical (flip)"}
 addUserKnob {22 flipON l ON T "nuke.thisNode().knob('flipMirror').setValue(1)\nnuke.toNode('MirrorConfoDGC').knob('flip').setValue(1)" +STARTLINE}
 addUserKnob {22 flipOFF l OFF -STARTLINE T "nuke.thisNode().knob('flipMirror').setValue(0)\nnuke.toNode('MirrorConfoDGC').knob('flip').setValue(0)"}
 addUserKnob {4 flipMirror l "flip Mirror" +INVISIBLE M {NONE MIRROR ""}}
 addUserKnob {26 ""}
 addUserKnob {4 CG_Mirror l work_in_CG_scene M {NoMirrored Mirrored}}
 addUserKnob {26 infoMirrorCG l "" +STARTLINE T "\n- En cas de mirror, communiquez avec la CG.\n\n1) Si setter en NoMirrored = export du mirrorCG (actif) pour application au compo.\n2) Si setter en Mirrored = exporte du MirrorCG (inactif) aucune modif au compo."}
}
Camera2 {
 inputs 0
 read_from_file true
 file /s/prods/colds/sequence/0089_mou/0089_mou_0010/common/camera/0089_mou_0010-repo-v001.abc
 name Camera_Repo
 label "\[lrange \[split \[value file] \"/\"] 10 end]"
 xpos -2109
 ypos 2190
 disable {{"!(CG_ON_OFF.CG_on_off &! RETIME_ON_OFF.ChoiceRetime)"}}
 addUserKnob {20 varTab l variable}
 addUserKnob {1 varSeq}
 varSeq "\[lindex \[split \[split \[split \[file tail \[value root.name]] / ] - ] _ ] 0]"
 addUserKnob {1 varShot}
 varShot "\[lindex \[split \[split \[file tail \[value root.name]] / ] - ] 0]"
}
StickyNote {
 inputs 0
 name StickyNote10
 tile_color 0x9d6600ff
 label "\napres ecriture\ndecoche \"read from file\" puis recoche\n\n"
 note_font_size 24
 note_font_color 0xffffffff
 xpos -2646
 ypos 2001
}
Camera2 {
 inputs 0
 read_from_file true
 file /s/prods/colds/sequence/0089_mou/0089_mou_0010/common/camera/0089_mou_0010-retime-v001.abc
 name Camera_Retime
 label "\[lrange \[split \[value file] \"/\"] 10 end]"
 xpos -2802
 ypos 2190
 disable {{"!(RETIME_ON_OFF.ChoiceRetime && CG_ON_OFF.CG_on_off)"}}
 addUserKnob {20 varTab l variable}
 addUserKnob {1 varSeq}
 varSeq "\[lindex \[split \[split \[split \[file tail \[value root.name]] / ] - ] _ ] 0]"
 addUserKnob {1 varShot}
 varShot "\[lindex \[split \[split \[file tail \[value root.name]] / ] - ] 0]"
}
NoOp {
 inputs 0
 name CG_ON_OFF
 tile_color 0x9999ff
 label "CG = <font color=yellow>\"\[value CG_on_off]\""
 note_font_size 30
 note_font_color 0xffffffff
 xpos -4660
 ypos -1061
 addUserKnob {20 User}
 addUserKnob {4 CG_on_off M {NONE CG ""}}
}
Camera2 {
 inputs 0
 read_from_file true
 file /s/prods/colds/sequence/0089_mou/0089_mou_0010/common/camera/0089_mou_0010-base-last.abc
 version 1
 name CAM_FROM_MATCHMOVE
 label "\[lrange \[split \[value file] \"/\"] 9 end]"
 xpos -2439
 ypos 1260
 disable {{"!(CG_ON_OFF.CG_on_off || RETIME_ON_OFF.ChoiceRetime )"}}
 addUserKnob {20 varTab l variable}
 addUserKnob {1 varSeq}
 varSeq "\[lindex \[split \[split \[split \[file tail \[value root.name]] / ] - ] _ ] 0]"
 addUserKnob {1 varShot}
 varShot "\[lindex \[split \[split \[file tail \[value root.name]] / ] - ] 0]"
}
NoOp {
 inputs 0
 name ASSET_CTRL
 tile_color 0x9999ff
 label "\nRELOAD LIVE_GROUP"
 note_font_size 30
 note_font_color 0xffffffff
 xpos -5254
 ypos 3967
 addUserKnob {20 RefreshLiveGroups l "Refresh LiveGroups"}
 addUserKnob {22 reload_liveGroups t "Ce boutton rafraichie\ntout les LiveGroups \"ASSET\"\n" T "from vfxNukeScripts.mikIO.buildcomp.scene.adapters.nuke_service import NukeService\nNukeService.reload_live_groups(\"ASSET\")\n" +STARTLINE}
}
Camera2 {
 inputs 0
 read_from_file true
 file /s/prods/colds/sequence/0089_mou/0089_mou_0010/common/camera/0089_mou_0010-retime_repo-v001.abc
 name Camera_Retime_Repo
 label "\[lrange \[split \[value file] \"/\"] 10 end]"
 xpos -1844
 ypos 2190
 disable {{"!(RETIME_ON_OFF.ChoiceRetime && \[python len(nuke.toNode(\"BKD_REPO_DGC\").getNodes()) >0])"}}
 addUserKnob {20 varTab l variable}
 addUserKnob {1 varSeq}
 varSeq "\[lindex \[split \[split \[split \[file tail \[value root.name]] / ] - ] _ ] 0]"
 addUserKnob {1 varShot}
 varShot "\[lindex \[split \[split \[file tail \[value root.name]] / ] - ] 0]"
}
StickyNote {
 inputs 0
 name StickyNote15
 tile_color 0xff0000ff
 label "KILL CONNECTION FROM UNDISTO"
 note_font_size 50
 note_font_color 0xffffffff
 xpos -4950
 ypos 4260
}
StickyNote {
 inputs 0
 name StickyNote1
 label "Setting de Reduce_Noise Regnanim par default\nFonctionne sur une majorité de shots\nA modifier si c'est pas top"
 note_font_size 25
 xpos -1826
 ypos 3958
}
NoOp {
 inputs 0
 name DMP_ON_OFF
 tile_color 0x9999ff
 label "DMP = <font color=yellow>\"\[value DMP_on_off]\""
 note_font_size 30
 note_font_color 0xffffffff
 xpos -4645
 ypos -720
 addUserKnob {20 User}
 addUserKnob {4 DMP_on_off M {NONE DMP "" ""}}
}
StickyNote {
 inputs 0
 name StickyNote2
 label LUT
 note_font_size 20
 xpos -2645
 ypos 4500
}
StickyNote {
 inputs 0
 name StickyNote4
 label LUT
 note_font_size 20
 xpos -3967
 ypos 4246
}
push $N451ea400
Dot {
 name Dot8
 xpos -4065
 ypos 6204
}
set N7c660f00 [stack 0]
Dot {
 name Dot7
 xpos -3933
 ypos 6204
}
Write {
 file /s/prods/colds/sequence/0089_mou/0089_mou_0010/vzero/image/wip/0089_mou_0010-vzero-base-nk-UNDISTO_LUT-v003-rec709-jpg/0089_mou_0010-vzero-base-nk-UNDISTO_LUT-v003-rec709.%04d.jpg
 colorspace rec709
 file_type jpeg
 _jpeg_sub_sampling 4:2:2
 create_directories true
 checkHashOnRead false
 version 1
 in_colorspace scene_linear
 out_colorspace scene_linear
 beforeRender miCreateFolders.miCreateFolders()
 name UNDISTO_LUT
 tile_color 0xff880000
 label Bricks
 xpos -3967
 ypos 6308
 disable {{"!(!RETIME_ON_OFF.ChoiceRetime && CG_ON_OFF.CG_on_off)"}}
 addUserKnob {20 mikWrite}
 addUserKnob {1 mikData l "" +STARTLINE +HIDDEN}
 mikData "\{\"type_source_selected\": \"root\", \"sources\": \{\"root\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[\"vzero\"], \"selected\": 0\}, \"Shot\": \{\"cache\": \"001_060\", \"values\": \[\"0089_mou_0010\"], \"selected\": 0\}, \"name\": \{\"cache\": \"\", \"values\": \[\"0089_mou_0010\"], \"selected\": 0\}, \"Sequence\": \{\"cache\": \"001\", \"values\": \[\"0089_mou\"], \"selected\": 0\}, \"syncWithComp\": \{\"cache\": \"\", \"values\": \[1], \"selected\": 0\}, \"colorspace\": \{\"cache\": \"rec709\", \"values\": \[\"rec709\"], \"selected\": 0\}, \"variant\": \{\"cache\": \"base\", \"values\": \[\"base\"], \"selected\": 0\}, \"render_source\": \{\"cache\": \"nk\", \"values\": \[\"shot\", \"element\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[\"UNDISTO_LUT\"], \"selected\": 0\}, \"dwaCompLevel\": \{\"cache\": \"\", \"values\": \[\"16\"], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"jpg\", \"values\": \[\"jpg\"], \"selected\": 0\}, \"exrCompressionMode\": \{\"cache\": \"\", \"values\": \[\"DWAA\"], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[3], \"selected\": 0\}, \"isElement\": \{\"cache\": \"\", \"values\": \[\"shot\", \"element\"], \"selected\": 0\}\}, \"assets\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"acescg\", \"values\": \[\"linear\", \"sRGB\", \"rec709\", \"Cineon\", \"Gamma1.8\", \"Gamma2.2\", \"Gamma2.4\", \"Gamma2.6\", \"Panalog\", \"REDLog\", \"ViperLog\", \"AlexaV3LogC\", \"PLogLin\", \"SLog\", \"SLog1\", \"SLog2\", \"SLog3\", \"CLog\", \"Log3G10\", \"Log3G12\", \"HybridLogGamma\", \"Protune\", \"BT1886\", \"st2084\", \"aces\", \"acescc\", \"acescct\", \"acesproxy\", \"acescg\", \"adx10\", \"adx16\", \"arri_v3logc_wg\", \"rec709_gamma22\", \"rec709_d60\", \"srgb8\", \"srgb_texture\", \"srgb_d60\", \"lmt_shaper\", \"log2_48_nits_shaper\", \"log2_48_nits_shaper_ap1\", \"linear_srgb\", \"raw\", \"dcdm_p3_clip\", \"p3dci\", \"rl3g10_rwg\", \"rwg_lin\", \"slog3_sgamutcine\"], \"selected\": 24\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"nk\", \"values\": \[\"nk\", \"nkmatte\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"exr\", \"values\": \[\"jpg\", \"dpx\", \"exr\", \"png\", \"tiff\", \"tga\"], \"selected\": 2\}, \"Asset\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"sg_asset_type\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}\}\}"
 addUserKnob {52 mikWriteUI l "" -STARTLINE T __import__('mikIO.ui.nuke.customKnobs.mikIOKnob').ui.nuke.customKnobs.mikIOKnob.MikWriteKnob()}
}
Scene {
 inputs 0
 name repo_scene
 xpos -2109
 ypos 1920
}
Dot {
 name Dot16
 xpos -2085
 ypos 2034
}
set N7c646b00 [stack 0]
Dot {
 name Dot17
 xpos -1821
 ypos 2034
}
WriteGeo {
 file "/s/prods/regnanim/sequence/\[value varSeq]/\[value varShot]/common/camera/repo/\[value varShot]-retime_repo-v001.abc"
 file_type abc
 writeGeometries false
 writePointClouds false
 writeAxes false
 name WriteGeo_Retime_Repo
 xpos -1855
 ypos 2084
 disable {{"!(RETIME_ON_OFF.ChoiceRetime && \[if \{\[python len(nuke.toNode(\"BKD_REPO_DGC\").getNodes())] > 0\} \{return 1\} \{return 0\}] )"}}
 addUserKnob {20 varTab l variable}
 addUserKnob {2 varSeq}
 varSeq "\[lindex \[split \[split \[split \[file tail \[value root.name]] / ] - ] _ ] 0]"
 addUserKnob {1 varShot}
 varShot "\[lindex \[split \[split \[file tail \[value root.name]] / ] - ] 0]"
}
push $N7c646b00
WriteGeo {
 file /s/prods/colds/sequence/0089_mou/0089_mou_0010/common/camera/0089_mou_0010-repo-v001.abc
 file_type abc
 writeGeometries false
 writePointClouds false
 writeAxes false
 name WriteGeo_Repo
 xpos -2119
 ypos 2084
 disable {{"!(\[if \{\[python len(nuke.toNode(\"BKD_REPO_DGC\").getNodes())] > 0\} \{return 1\} \{return 0\}]  &! RETIME_ON_OFF.ChoiceRetime)"}}
 addUserKnob {20 varTab l variable}
 addUserKnob {2 varSeq}
 varSeq "\[lindex \[split \[split \[split \[file tail \[value root.name]] / ] - ] _ ] 0]"
 addUserKnob {1 varShot}
 varShot "\[lindex \[split \[split \[file tail \[value root.name]] / ] - ] 0]"
}
NoOp {
 inputs 0
 name EXPORT_ASSETS_ALL
 tile_color 0x9999ff
 note_font_size 50
 note_font_color 0xffffffff
 xpos -1226
 ypos -1290
 addUserKnob {20 User}
 addUserKnob {22 export_assets l "Export Assets" T "from vfxNukeScripts.python.scene_generator.vzero import export_process\nis_repo = nuke.thisNode()\[\"export_repo\"].value()\nis_retime= nuke.thisNode()\[\"export_retime\"].value()\nis_degrain = nuke.thisNode()\[\"export_degrain\"].value()\nis_all = nuke.thisNode()\[\"export_all\"].value()\nexport_process.run(is_repo, is_retime, is_degrain, is_all)\n" +STARTLINE}
 addUserKnob {6 export_repo l "Export Repo Only" +STARTLINE}
 export_repo true
 addUserKnob {6 export_retime l "Export Retime Only" +STARTLINE}
 export_retime true
 addUserKnob {6 export_degrain l "Export Denoise Only" +STARTLINE}
 export_degrain true
 addUserKnob {6 export_all l "Export All Assets" +STARTLINE}
 export_all true
}
NoOp {
 inputs 0
 name DGN_ON_OFF
 tile_color 0x9999ff
 label "DGN = <font color=yellow>\"\[value dgn_on_off]\"\n\n\n"
 note_font_size 30
 note_font_color 0xffffffff
 xpos -4648
 ypos -288
 hide_input true
 addUserKnob {20 User}
 addUserKnob {4 dgn_on_off l "DGN (on / off)" M {NONE DGN "" "" "" "" "" ""}}
 dgn_on_off DGN
}
NoOp {
 inputs 0
 name CONFO_CADRE_ON_OFF
 tile_color 0x9999ff
 label "DGN = <font color=yellow>\"\[value confo_on_off]\"\n\n\n"
 note_font_size 30
 note_font_color 0xffffffff
 xpos -4642
 ypos -142
 hide_input true
 addUserKnob {20 User}
 addUserKnob {4 confo_on_off l "CONFO (on / off)" M {NONE CONFO "" "" "" "" "" "" ""}}
 confo_on_off CONFO
}
NoOp {
 inputs 0
 name RENDER_CTRL
 tile_color 0x9accff
 label REFRESH
 note_font_size 20
 note_font_color 0xffffffff
 xpos -5254
 ypos 6245
 addUserKnob {20 RefreshWrite l "Refresh & Select WriteNode"}
 addUserKnob {22 reload_writes l "Reload Writes" T "for n in nuke.allNodes():\n    n.setSelected(False)\n\nfor node in nuke.allNodes('Write') :\n        if 'Bricks' in node\['label'].value() and node\['disable'].value() == 0 :\n           node.showControlPanel()\n           node.hideControlPanel()\n           node.setSelected(True)\n\nnuke.toNode('RETIME_UNDISTO').knob('dw_compression_level').setValue(200)\nnuke.toNode('UNDISTO').knob('dw_compression_level').setValue(200)\n" +STARTLINE}
}
push $N45135600
Dot {
 name Link_src-master01-v6
 tile_color 0x415939ff
 label "  Connected to :\n  \[regsub Anchor_ \[value Tlink] \"\"]\n\n"
 note_font_size 20
 note_font_color 0xb26300ff
 xpos -4626
 ypos 3864
 hide_input true
 addUserKnob {20 Options}
 addUserKnob {1 Tlink l "" +STARTLINE +HIDDEN}
 Tlink Anchor_MASTER_INPUT
 addUserKnob {22 duplicate l "Duplicate Link" -STARTLINE T anchorLink.LinkDot.duplicateLink(nuke.thisNode())}
 addUserKnob {22 connect l "Reconnect Selection" -STARTLINE T anchorLink.LinkDot.connect(nuke.selectedNodes())}
 addUserKnob {26 "Family OP"}
 addUserKnob {22 rename l Rename -STARTLINE T anchorLink.AnchorDot.renameByFamily(nuke.thisNode())}
 addUserKnob {22 select l Select -STARTLINE T anchorLink.AnchorDot.selectByFamily(nuke.thisNode())}
 addUserKnob {22 recolor l "Recolor from parent" -STARTLINE T anchorLink.AnchorDot.changeColorByFamily(nuke.thisNode())}
 addUserKnob {26 "Graph UI"}
 addUserKnob {22 showHide l "Show / hide inputs ALL" -STARTLINE T anchorLink.LinkDot.toggleInputs(nuke.allNodes('Dot'))}
 addUserKnob {26 "Navigate to"}
 addUserKnob {22 navParent l Anchor -STARTLINE T anchorLink.LinkDot.navToParent(nuke.thisNode())}
 addUserKnob {22 navCurrent l Link -STARTLINE T anchorLink.LinkDot.navToCurrent(nuke.thisNode())}
}
Dot {
 name Dot19
 xpos -4626
 ypos 4134
}
set N7c61eb00 [stack 0]
Dot {
 name Dot18
 xpos -4428
 ypos 4134
}
set N7c61e400 [stack 0]
Text2 {
 font_size_toolbar 100
 font_width_toolbar 100
 font_height_toolbar 100
 replace true
 message "dgc version : \n\[value Anchor_DGC_INPUT.varDGC]\n\nHandles = \[value GetHandles.u]-\[value GetHandles.v]\nCut = \[value GetCut.u]-\[value GetCut.v]\n\nSpeed: \[value speed]%\nMethode : \[if \{\[python  nuke.toNode(\"KronosParent\").knob(\"OvTimingFrame2\").hasExpression()]\} \{return \[python  nuke.toNode(\"KronosParent\").knob(\"OvTimingFrame2\").toScript() ]\} \{return \"Motion\"\}]\n"
 old_message {{100 103 99 32 118 101 114 115 105 111 110 32 58 32 10 78 111 116 104 105 110 103 32 105 115 32 110 97 109 101 100 32 34 105 110 112 117 116 34 10 10 72 97 110 100 108 101 115 32 61 32 57 55 55 45 49 51 53 51 10 67 117 116 32 61 32 57 56 55 45 49 51 52 51 10 10 83 112 101 101 100 58 32 48 37 10 77 101 116 104 111 100 101 32 58 32 77 111 116 105 111 110 10}
   }
 old_expression_markers {{15 38 51 53 55 58 66 68 70 73 83 83 96 101}
   }
 box {0 0 {input.width} {input.height}}
 xjustify center
 yjustify center
 transforms {{0 2}
   }
 font_size_values {{0 200 1 200 2 200 3 200 4 200 5 200 6 200 7 200 8 200 9 200 10 200 11 200 12 200 13 200 14 200 15 200 16 200 17 200 18 200 19 200 20 200 21 200 22 200 23 200 24 200 25 200 26 200 27 200 28 200 29 200 30 200 31 200 32 200 33 200 34 200 35 200 36 200 37 200 38 200 39 200 39 200 40 200 41 200 42 200 43 200 44 200 45 200 46 200 47 200 48 200 49 200 50 200 51 200 52 200 53 200 54 200 55 200 56 200 57 200 58 200 59 200 60 200 61 200 62 200 63 200 64 200 65 200 66 200 67 200 68 200 69 200 70 200 71 200 72 200 73 200 74 200 75 200 76 200 77 200 78 200 79 200 80 200 81 200 82 200 83 200 84 200 85 200 0 110 1 110 2 110 3 110 4 110 5 110 6 110 7 110 8 110 9 110 10 110 11 110 12 110 13 110 14 110 15 110 16 110 17 110 18 110 19 110 20 110 21 110 22 110 23 110 24 110 25 110 26 110 27 110 28 110 29 110 30 110 31 110 32 110 33 110 34 110 35 110 36 110 37 110 38 110 39 110 39 110 40 110 41 110 42 110 43 110 44 110 45 110 46 110 47 110 48 110 49 110 50 110 51 110 52 110 53 110 54 110 55 110 56 110 57 110 59 110 74 110}
   }
 cursor_position 357
 center {2113 885}
 cursor_initialised true
 autofit_bbox false
 initial_cursor_position {{0 1770}
   }
 group_animations {{0} imported: 0 selected: items: "root transform/"}
 animation_layers {{1 11 2113 885 0 0 1 1 0 0 0 0}
   }
 name TEXT_INFO_SHOT1
 xpos -4396
 ypos 4220
 addUserKnob {20 User}
 addUserKnob {7 speed}
 speed {{"int(((KronosParent.OvTimingFrameDuplicate(frame) - KronosParent.OvTimingFrameDuplicate(frame - 1)) * 100) * 100) / 100"}}
 addUserKnob {30 GetHandles}
 GetHandles {{"\[value root.first_frame]" x1002 0} {"\[value root.last_frame]" x1002 0}}
 addUserKnob {30 GetCut}
 GetCut {{"\[value root.first_frame]+10" x1002 0} {"\[value root.last_frame]-10" x1002 0}}
}
push $N7c61e400
Text2 {
 font_size_toolbar 100
 font_width_toolbar 100
 font_height_toolbar 100
 replace true
 message "dgc version : \n\[value Anchor_DGC_INPUT.varDGC]\n\nWorkRange = \[value GetHandles.u]-\[value GetHandles.v]\nCutRange = \[value GetCut.u]-\[value GetCut.v]\n\nRetime range Correspondance:\nWorkRange: \[value Handles_IN_Rounded]-\[value Handles_OUT_Rounded]\nCutRange: \[value Cut_IN_Rounded]-\[value Cut_OUT_Rounded]\n\nSpeed: \[value speed]%\nMethode : \[if \{\[python  nuke.toNode(\"KronosParent\").knob(\"OvTimingFrame2\").hasExpression()]\} \{return \[python  nuke.toNode(\"KronosParent\").knob(\"OvTimingFrame2\").toScript() ]\} \{return \"Motion\"\}]\n\n"
 old_message {{100 103 99 32 118 101 114 115 105 111 110 32 58 32 10 78 111 116 104 105 110 103 32 105 115 32 110 97 109 101 100 32 34 105 110 112 117 116 34 10 10 87 111 114 107 82 97 110 103 101 32 61 32 57 55 55 45 49 51 53 51 10 67 117 116 82 97 110 103 101 32 61 32 57 56 55 45 49 51 52 51 10 10 82 101 116 105 109 101 32 114 97 110 103 101 32 67 111 114 114 101 115 112 111 110 100 97 110 99 101 58 10 87 111 114 107 82 97 110 103 101 58 32 49 48 48 49 45 49 48 48 49 10 67 117 116 82 97 110 103 101 58 32 49 48 48 49 45 49 48 48 49 10 10 83 112 101 101 100 58 32 48 37 10 77 101 116 104 111 100 101 32 58 32 77 111 116 105 111 110 10 10}
   }
 old_expression_markers {{15 38 53 55 57 60 73 75 77 80 123 126 128 131 143 146 148 151 161 161 174 179}
   }
 box {0 0 {input.width} {input.height}}
 xjustify center
 yjustify center
 transforms {{0 2}
   }
 font_size_values {{0 150 1 150 2 150 3 150 4 150 5 150 6 150 7 150 8 150 9 150 10 150 11 150 12 150 13 150 14 150 15 150 16 150 17 150 18 150 19 150 20 150 21 150 22 150 23 150 24 150 25 150 26 150 27 150 28 150 29 150 30 150 31 150 32 150 33 150 34 150 35 150 36 150 37 150 38 150 39 150 40 150 41 150 42 150 43 150 44 150 45 150 46 150 47 150 48 150 49 150 50 150 51 150 52 150 53 150 54 150 55 150 56 150 57 150 58 150 59 150 60 150 61 150 62 150 63 150 64 150 65 150 66 150 67 150 68 150 69 150 70 150 71 150 72 150 73 150 74 150 75 150 76 150 77 150 78 150 79 150 80 150 81 150 82 150 83 150 84 150 85 150 86 150 87 150 88 150 89 150 90 150 91 150 92 150 93 150 94 150 95 150 96 150 97 150 98 150 99 150 100 150 101 150 102 150 103 150 104 150 105 150 106 150 107 150 108 150 109 150 110 150 111 150 112 150 113 150 114 150 115 150 116 150 117 150 118 150 119 150 120 150 121 150 122 150 123 150 124 150 125 150 126 150 127 150 128 150 129 150 130 150 131 150 132 150 133 150 134 150 135 150 136 150 137 150 138 150 139 150 140 150 141 150 142 150 143 150 144 150 145 150 146 150 147 150 148 150 149 150 150 150 151 150 181 150 0 110 1 110 2 110 3 110 4 110 5 110 6 110 7 110 8 110 9 110 10 110 11 110 12 110 13 110 14 110 21 110 22 110 23 110 24 110 25 110 26 110 27 110 28 110 29 110 30 110 31 110 32 110 33 110 34 110 35 110 36 110 58 110 59 110 60 110 61 110 62 110 63 110 64 110 70 110 71 110 72 110 73 110 74 110 75 110 76 110 77 110 78 110 79 110 80 110 81 110 82 110 83 110 84 110 85 110 86 110 87 110 88 110 90 110 108 110 109 110 110 110 111 110 112 110 121 110 122 110 123 110 124 110 125 110 126 110 127 110 128 110 129 110 130 110 131 110 132 110 133 110 134 110 135 110 141 110 142 110 143 110 144 110 145 110 146 110 147 110 149 110 150 110 151 110 181 110 154 150 155 150 156 150 157 150 158 150 159 150 160 150 161 150 162 150 154 100 155 100 156 100 157 100 158 100 159 100 160 100 161 100 162 100}
   }
 font_width_values {{0 100 1 100 2 100 3 100 4 100 5 100 6 100 7 100 8 100 9 100 10 100 11 100 12 100 13 100 14 100 15 100 16 100 17 100 18 100 19 100 20 100 21 100 22 100 23 100 24 100 25 100 26 100 27 100 28 100 29 100 30 100 31 100 32 100 33 100 34 100 35 100 36 100 37 100 38 100 39 100 40 100 41 100 50 100 51 100 52 100 53 100 54 100 55 100 56 100 57 100 58 100 59 100 60 100 61 100 62 100 63 100 64 100 70 100 71 100 72 100 73 100 74 100 75 100 76 100 77 100 78 100 79 100 80 100 81 100 82 100 83 100 84 100 85 100 86 100 87 100 88 100 89 100 90 100 91 100 92 100 93 100 94 100 95 100 96 100 97 100 98 100 99 100 100 100 101 100 102 100 103 100 104 100 105 100 106 100 107 100 108 100 109 100 110 100 111 100 112 100 121 100 122 100 123 100 124 100 125 100 126 100 127 100 128 100 129 100 130 100 131 100 132 100 133 100 134 100 135 100 141 100 142 100 143 100 144 100 145 100 146 100 147 100 148 100 149 100 150 100 151 100 181 100 0 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 121 0 122 0 123 0 124 0 125 0 126 0 127 0 128 0 129 0 130 0 131 0 132 0 133 0 134 0 135 0 141 0 142 0 143 0 144 0 145 0 146 0 147 0 148 0 149 0 150 0 151 0 181 0}
   }
 cursor_position 517
 center {2113 885}
 cursor_initialised true
 autofit_bbox false
 initial_cursor_position {{0 1770}
   }
 group_animations {{0} imported: 0 selected: items: "root transform/"}
 animation_layers {{1 11 2113 885 0 0 1 1 0 0 0 0}
   }
 name TEXT_INFO_SHOT
 xpos -4526
 ypos 4220
 addUserKnob {20 User}
 addUserKnob {7 speed}
 speed {{"int(((KronosParent.OvTimingFrameDuplicate(frame) - KronosParent.OvTimingFrameDuplicate(frame - 1)) * 100) * 100) / 100"}}
 addUserKnob {30 GetHandles}
 GetHandles {{"\[value root.first_frame]" x1002 0} {"\[value root.last_frame]" x1002 0}}
 addUserKnob {30 GetCut}
 GetCut {{"\[value root.first_frame]+10" x1002 0} {"\[value root.last_frame]-10" x1002 0}}
 addUserKnob {7 Cut_IN +INVISIBLE R 900 1300}
 Cut_IN {{"parent.TimeWarp_ExportAscii1.lookup (GetCut.u)"}}
 addUserKnob {7 Cut_IN_Rounded R 900 1300}
 Cut_IN_Rounded {{"\[format \"%.3f\" \[value Cut_IN]]"}}
 addUserKnob {7 Cut_OUT +INVISIBLE R 900 1300}
 Cut_OUT {{"parent.TimeWarp_ExportAscii1.lookup (GetCut.v)"}}
 addUserKnob {7 Cut_OUT_Rounded R 900 1300}
 Cut_OUT_Rounded {{"\[format \"%.3f\" \[value Cut_OUT]]"}}
 addUserKnob {7 Handles_IN +INVISIBLE R 900 1300}
 Handles_IN {{"parent.TimeWarp_ExportAscii1.lookup (GetHandles.u)"}}
 addUserKnob {7 Handles_IN_Rounded R 900 1300}
 Handles_IN_Rounded {{"\[format \"%.3f\" \[value Handles_IN]]"}}
 addUserKnob {7 Handles_OUT +INVISIBLE R 900 1300}
 Handles_OUT {{"parent.TimeWarp_ExportAscii1.lookup (GetHandles.v)"}}
 addUserKnob {7 Handles_OUT_Rounded R 900 1300}
 Handles_OUT_Rounded {{"\[format \"%.3f\" \[value Handles_OUT]]"}}
}
Switch {
 inputs 2
 which {{!RETIME_ON_OFF.ChoiceRetime}}
 name Switch2
 tile_color 0x3c9346ff
 label "\[if \{\[value which]!=\"0\"\} \{return \"\[knob this.tile_color 0x3c9346ff]\"\}  \{return \"\[knob this.tile_color 0x93493cff]\"\}]\[value which]"
 xpos -4462
 ypos 4364
}
Dot {
 name Dot20
 xpos -4428
 ypos 4434
}
push $N7c61eb00
OCIOLookTransform {
 in_colorspace scene_linear
 look SHOT_LOOK
 out_colorspace scene_linear
 key1 SHOT
 value1 "\[regexp -nocase -inline \{^\[a-z0-9_]+\} \[regexp -inline \{\[^/]+\$\} \[metadata input/filename]]]"
 name APPLY_SHOW_LUT2
 xpos -4660
 ypos 4214
}
add_layer {INFO INFO.red INFO.green INFO.blue INFO.alpha}
Shuffle2 {
 inputs 2
 fromInput1 {{1} B A}
 out1 INFO
 fromInput2 {{0} B A}
 mappings "4 rgba.red 0 0 INFO.red 0 0 rgba.green 0 1 INFO.green 0 1 rgba.blue 0 2 INFO.blue 0 2 rgba.alpha 0 3 INFO.alpha 0 3"
 name Shuffle1
 label "<font color=white> \[if \{ \[value in1] == \[value out1]\} \{ return \[string toupper \[value in1]] \} else \{ return \[string toupper \[value in1]-->\[value out1]] \} ]"
 xpos -4660
 ypos 4420
}
Reformat {
 type scale
 scale 0.25
 name Reformat4
 label "Resize: \[value resize] - center: \[value center]\nFilter: \[value filter]"
 xpos -4660
 ypos 4508
}
LayerContactSheet {
 rows 1
 columns 2
 autodims false
 center true
 name LayerContactSheet1
 xpos -4660
 ypos 4610
}
Write {
 file /s/prods/colds/sequence/0089_mou/0089_mou_0010/vzero/image/wip/0089_mou_0010-vzero-base-nk-INFOS-v003-acescg-exr/0089_mou_0010-vzero-base-nk-INFOS-v003-acescg.%04d.exr
 colorspace acescg
 file_type exr
 compression DWAA
 dw_compression_level 300
 metadata "all metadata"
 first_part rgba
 in_colorspace scene_linear
 out_colorspace scene_linear
 beforeRender miCreateFolders.miCreateFolders()
 beforeFrameRender nuke.memory('free')
 name INFOS
 knobChanged nuke.thisNode().knob('dw_compression_level').setValue(300)
 tile_color 0xff880000
 label Bricks
 xpos -4660
 ypos 6303
 disable {{"\[if \{\[value RETIME_ON_OFF.ChoiceRetime] != \"NONE\"\} \{return \"0\"\} \{return \"1\"\}]"}}
 addUserKnob {20 mikWrite}
 addUserKnob {1 mikData l "" +STARTLINE +HIDDEN}
 mikData "\{\"type_source_selected\": \"root\", \"sources\": \{\"root\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[\"vzero\"], \"selected\": 0\}, \"Shot\": \{\"cache\": \"testvzero_010\", \"values\": \[\"0089_mou_0010\"], \"selected\": 0\}, \"name\": \{\"cache\": \"\", \"values\": \[\"0089_mou_0010\"], \"selected\": 0\}, \"Sequence\": \{\"cache\": \"testvzero\", \"values\": \[\"0089_mou\"], \"selected\": 0\}, \"syncWithComp\": \{\"cache\": \"\", \"values\": \[1], \"selected\": 0\}, \"colorspace\": \{\"cache\": \"acescg\", \"values\": \[\"acescg\"], \"selected\": 0\}, \"variant\": \{\"cache\": \"base\", \"values\": \[\"base\"], \"selected\": 0\}, \"render_source\": \{\"cache\": \"nk\", \"values\": \[\"nk\", \"nkmatte\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[\"INFOS\"], \"selected\": 0\}, \"dwaCompLevel\": \{\"cache\": \"\", \"values\": \[\"45.0\"], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"exr\", \"values\": \[\"exr\"], \"selected\": 0\}, \"exrCompressionMode\": \{\"cache\": \"\", \"values\": \[\"None\"], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[3], \"selected\": 0\}, \"isElement\": \{\"cache\": \"\", \"values\": \[\"shot\", \"element\"], \"selected\": 0\}\}, \"assets\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"acescg\", \"values\": \[\"linear\", \"sRGB\", \"rec709\", \"Cineon\", \"Gamma1.8\", \"Gamma2.2\", \"Gamma2.4\", \"Gamma2.6\", \"Panalog\", \"REDLog\", \"ViperLog\", \"AlexaV3LogC\", \"PLogLin\", \"SLog\", \"SLog1\", \"SLog2\", \"SLog3\", \"CLog\", \"Log3G10\", \"Log3G12\", \"HybridLogGamma\", \"Protune\", \"BT1886\", \"st2084\", \"aces\", \"acescc\", \"acescct\", \"acesproxy\", \"acescg\", \"adx10\", \"adx16\", \"arri_v3logc_wg\", \"rec709_gamma22\", \"rec709_d60\", \"srgb8\", \"srgb_texture\", \"srgb_d60\", \"lmt_shaper\", \"log2_48_nits_shaper\", \"log2_48_nits_shaper_ap1\", \"linear_srgb\", \"raw\", \"dcdm_p3_clip\", \"p3dci\", \"rl3g10_rwg\", \"rwg_lin\", \"slog3_sgamutcine\"], \"selected\": 24\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"nk\", \"values\": \[\"nk\", \"nkmatte\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"exr\", \"values\": \[\"jpg\", \"dpx\", \"exr\", \"png\", \"tiff\", \"tga\"], \"selected\": 2\}, \"Asset\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"sg_asset_type\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}\}\}"
 addUserKnob {52 mikWriteUI l "" -STARTLINE T __import__('mikIO.ui.nuke.customKnobs.mikIOKnob').ui.nuke.customKnobs.mikIOKnob.MikWriteKnob()}
}
push $N7c660f00
Write {
 file /s/prods/colds/sequence/0089_mou/0089_mou_0010/vzero/image/wip/0089_mou_0010-vzero-base-nk-RETIME_UNDISTO_LUT-v003-rec709-jpg/0089_mou_0010-vzero-base-nk-RETIME_UNDISTO_LUT-v003-rec709.%04d.jpg
 colorspace rec709
 file_type jpeg
 _jpeg_sub_sampling 4:2:2
 create_directories true
 checkHashOnRead false
 version 1
 in_colorspace scene_linear
 out_colorspace scene_linear
 beforeRender miCreateFolders.miCreateFolders()
 name RETIME_UNDISTO_LUT
 tile_color 0xff880000
 label Bricks
 xpos -4099
 ypos 6304
 disable {{"!(RETIME_ON_OFF.ChoiceRetime && CG_ON_OFF.CG_on_off)"}}
 addUserKnob {20 mikWrite}
 addUserKnob {1 mikData l "" +STARTLINE +HIDDEN}
 mikData "\{\"type_source_selected\": \"root\", \"sources\": \{\"root\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[\"vzero\"], \"selected\": 0\}, \"Shot\": \{\"cache\": \"001_060\", \"values\": \[\"0089_mou_0010\"], \"selected\": 0\}, \"name\": \{\"cache\": \"\", \"values\": \[\"0089_mou_0010\"], \"selected\": 0\}, \"Sequence\": \{\"cache\": \"001\", \"values\": \[\"0089_mou\"], \"selected\": 0\}, \"variant\": \{\"cache\": \"base\", \"values\": \[\"base\"], \"selected\": 0\}, \"colorspace\": \{\"cache\": \"rec709\", \"values\": \[\"rec709\"], \"selected\": 0\}, \"syncWithComp\": \{\"cache\": \"\", \"values\": \[1], \"selected\": 0\}, \"render_source\": \{\"cache\": \"nk\", \"values\": \[\"nk\", \"nkmatte\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[\"RETIME_UNDISTO_LUT\"], \"selected\": 0\}, \"dwaCompLevel\": \{\"cache\": \"\", \"values\": \[\"0\"], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"jpg\", \"values\": \[\"jpg\"], \"selected\": 0\}, \"exrCompressionMode\": \{\"cache\": \"\", \"values\": \[\"None\"], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[3], \"selected\": 0\}, \"isElement\": \{\"cache\": \"\", \"values\": \[\"shot\", \"element\"], \"selected\": 0\}\}, \"assets\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"acescg\", \"values\": \[\"linear\", \"sRGB\", \"rec709\", \"Cineon\", \"Gamma1.8\", \"Gamma2.2\", \"Gamma2.4\", \"Gamma2.6\", \"Panalog\", \"REDLog\", \"ViperLog\", \"AlexaV3LogC\", \"PLogLin\", \"SLog\", \"SLog1\", \"SLog2\", \"SLog3\", \"CLog\", \"Log3G10\", \"Log3G12\", \"HybridLogGamma\", \"Protune\", \"BT1886\", \"st2084\", \"aces\", \"acescc\", \"acescct\", \"acesproxy\", \"acescg\", \"adx10\", \"adx16\", \"arri_v3logc_wg\", \"rec709_gamma22\", \"rec709_d60\", \"srgb8\", \"srgb_texture\", \"srgb_d60\", \"lmt_shaper\", \"log2_48_nits_shaper\", \"log2_48_nits_shaper_ap1\", \"linear_srgb\", \"raw\", \"dcdm_p3_clip\", \"p3dci\", \"rl3g10_rwg\", \"rwg_lin\", \"slog3_sgamutcine\"], \"selected\": 24\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"nk\", \"values\": \[\"nk\", \"nkmatte\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"exr\", \"values\": \[\"jpg\", \"dpx\", \"exr\", \"png\", \"tiff\", \"tga\"], \"selected\": 2\}, \"Asset\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"sg_asset_type\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}\}\}"
 addUserKnob {52 mikWriteUI l "" -STARTLINE T __import__('mikIO.ui.nuke.customKnobs.mikIOKnob').ui.nuke.customKnobs.mikIOKnob.MikWriteKnob()}
}
push $N451eb200
Dot {
 name Dot11
 xpos -3735
 ypos 4134
}
ModifyMetaData {
 metadata {
  {remove * ""}
 }
 name ModifyMetaData2
 label "REMOVE ALL"
 xpos -3769
 ypos 5354
 disable true
}
ModifyMetaData {
 metadata {
  {set Mirror_in_CG_scene "\[value MIRROR_ON_OFF.CG_Mirror]"}
 }
 name ModifyMetaData3
 label "ADD MIRROR INFO"
 xpos -3769
 ypos 5398
}
Dot {
 name Dot9
 xpos -3735
 ypos 6204
}
set N2f49b900 [stack 0]
Write {
 file /s/prods/colds/sequence/0089_mou/0089_mou_0010/vzero/image/wip/0089_mou_0010-vzero-base-nk-RETIME_UNDISTO-v003-acescg-exr/0089_mou_0010-vzero-base-nk-RETIME_UNDISTO-v003-acescg.%04d.exr
 colorspace acescg
 file_type exr
 compression DWAA
 dw_compression_level 0
 metadata "all metadata"
 first_part rgba
 create_directories true
 version 1
 in_colorspace scene_linear
 out_colorspace scene_linear
 beforeRender miCreateFolders.miCreateFolders()
 name RETIME_UNDISTO
 tile_color 0xff880000
 label Bricks
 xpos -3769
 ypos 6308
 disable {{"!(RETIME_ON_OFF.ChoiceRetime && CG_ON_OFF.CG_on_off)"}}
 addUserKnob {20 mikWrite}
 addUserKnob {1 mikData l "" +STARTLINE +HIDDEN}
 mikData "\{\"type_source_selected\": \"root\", \"sources\": \{\"root\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[\"vzero\"], \"selected\": 0\}, \"Shot\": \{\"cache\": \"001_060\", \"values\": \[\"0089_mou_0010\"], \"selected\": 0\}, \"name\": \{\"cache\": \"\", \"values\": \[\"0089_mou_0010\"], \"selected\": 0\}, \"Sequence\": \{\"cache\": \"001\", \"values\": \[\"0089_mou\"], \"selected\": 0\}, \"syncWithComp\": \{\"cache\": \"\", \"values\": \[1], \"selected\": 0\}, \"colorspace\": \{\"cache\": \"acescg\", \"values\": \[\"acescg\"], \"selected\": 0\}, \"variant\": \{\"cache\": \"base\", \"values\": \[\"base\"], \"selected\": 0\}, \"render_source\": \{\"cache\": \"nk\", \"values\": \[\"nk\", \"nkmatte\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[\"RETIME_UNDISTO\"], \"selected\": 0\}, \"dwaCompLevel\": \{\"cache\": \"\", \"values\": \[\"0\"], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"exr\", \"values\": \[\"exr\"], \"selected\": 0\}, \"exrCompressionMode\": \{\"cache\": \"\", \"values\": \[\"None\"], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[3], \"selected\": 0\}, \"isElement\": \{\"cache\": \"\", \"values\": \[\"shot\", \"element\"], \"selected\": 0\}\}, \"assets\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"acescg\", \"values\": \[\"linear\", \"sRGB\", \"rec709\", \"Cineon\", \"Gamma1.8\", \"Gamma2.2\", \"Gamma2.4\", \"Gamma2.6\", \"Panalog\", \"REDLog\", \"ViperLog\", \"AlexaV3LogC\", \"PLogLin\", \"SLog\", \"SLog1\", \"SLog2\", \"SLog3\", \"CLog\", \"Log3G10\", \"Log3G12\", \"HybridLogGamma\", \"Protune\", \"BT1886\", \"st2084\", \"aces\", \"acescc\", \"acescct\", \"acesproxy\", \"acescg\", \"adx10\", \"adx16\", \"arri_v3logc_wg\", \"rec709_gamma22\", \"rec709_d60\", \"srgb8\", \"srgb_texture\", \"srgb_d60\", \"lmt_shaper\", \"log2_48_nits_shaper\", \"log2_48_nits_shaper_ap1\", \"linear_srgb\", \"raw\", \"dcdm_p3_clip\", \"p3dci\", \"rl3g10_rwg\", \"rwg_lin\", \"slog3_sgamutcine\"], \"selected\": 24\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"nk\", \"values\": \[\"nk\", \"nkmatte\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"exr\", \"values\": \[\"jpg\", \"dpx\", \"exr\", \"png\", \"tiff\", \"tga\"], \"selected\": 2\}, \"Asset\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"sg_asset_type\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}\}\}"
 addUserKnob {52 mikWriteUI l "" -STARTLINE T __import__('mikIO.ui.nuke.customKnobs.mikIOKnob').ui.nuke.customKnobs.mikIOKnob.MikWriteKnob()}
}
push $N2f49b900
Dot {
 name Dot12
 xpos -3603
 ypos 6204
}
Write {
 file /s/prods/colds/sequence/0089_mou/0089_mou_0010/vzero/image/wip/0089_mou_0010-vzero-base-nk-UNDISTO-v003-acescg-exr/0089_mou_0010-vzero-base-nk-UNDISTO-v003-acescg.%04d.exr
 colorspace acescg
 file_type exr
 compression DWAA
 dw_compression_level 0
 metadata "all metadata"
 first_part rgba
 create_directories true
 version 1
 in_colorspace scene_linear
 out_colorspace scene_linear
 beforeRender miCreateFolders.miCreateFolders()
 name UNDISTO
 tile_color 0xff880000
 label Bricks
 xpos -3637
 ypos 6308
 disable {{"!(!RETIME_ON_OFF.ChoiceRetime && CG_ON_OFF.CG_on_off)"}}
 addUserKnob {20 mikWrite}
 addUserKnob {1 mikData l "" +STARTLINE +HIDDEN}
 mikData "\{\"type_source_selected\": \"root\", \"sources\": \{\"root\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[\"vzero\"], \"selected\": 0\}, \"Shot\": \{\"cache\": \"001_060\", \"values\": \[\"0089_mou_0010\"], \"selected\": 0\}, \"name\": \{\"cache\": \"\", \"values\": \[\"0089_mou_0010\"], \"selected\": 0\}, \"Sequence\": \{\"cache\": \"001\", \"values\": \[\"0089_mou\"], \"selected\": 0\}, \"variant\": \{\"cache\": \"base\", \"values\": \[\"base\"], \"selected\": 0\}, \"colorspace\": \{\"cache\": \"acescg\", \"values\": \[\"acescg\"], \"selected\": 0\}, \"syncWithComp\": \{\"cache\": \"\", \"values\": \[1], \"selected\": 0\}, \"render_source\": \{\"cache\": \"nk\", \"values\": \[\"nk\", \"nkmatte\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[\"UNDISTO\"], \"selected\": 0\}, \"dwaCompLevel\": \{\"cache\": \"\", \"values\": \[\"0\"], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"exr\", \"values\": \[\"exr\"], \"selected\": 0\}, \"exrCompressionMode\": \{\"cache\": \"\", \"values\": \[\"None\"], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[3], \"selected\": 0\}, \"isElement\": \{\"cache\": \"\", \"values\": \[\"shot\", \"element\"], \"selected\": 0\}\}, \"assets\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"acescg\", \"values\": \[\"linear\", \"sRGB\", \"rec709\", \"Cineon\", \"Gamma1.8\", \"Gamma2.2\", \"Gamma2.4\", \"Gamma2.6\", \"Panalog\", \"REDLog\", \"ViperLog\", \"AlexaV3LogC\", \"PLogLin\", \"SLog\", \"SLog1\", \"SLog2\", \"SLog3\", \"CLog\", \"Log3G10\", \"Log3G12\", \"HybridLogGamma\", \"Protune\", \"BT1886\", \"st2084\", \"aces\", \"acescc\", \"acescct\", \"acesproxy\", \"acescg\", \"adx10\", \"adx16\", \"arri_v3logc_wg\", \"rec709_gamma22\", \"rec709_d60\", \"srgb8\", \"srgb_texture\", \"srgb_d60\", \"lmt_shaper\", \"log2_48_nits_shaper\", \"log2_48_nits_shaper_ap1\", \"linear_srgb\", \"raw\", \"dcdm_p3_clip\", \"p3dci\", \"rl3g10_rwg\", \"rwg_lin\", \"slog3_sgamutcine\"], \"selected\": 24\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"nk\", \"values\": \[\"nk\", \"nkmatte\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"exr\", \"values\": \[\"jpg\", \"dpx\", \"exr\", \"png\", \"tiff\", \"tga\"], \"selected\": 2\}, \"Asset\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"sg_asset_type\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}\}\}"
 addUserKnob {52 mikWriteUI l "" -STARTLINE T __import__('mikIO.ui.nuke.customKnobs.mikIOKnob').ui.nuke.customKnobs.mikIOKnob.MikWriteKnob()}
}
push $N4524e400
Dot {
 name Link_Link_MASTER_INPUT2
 tile_color 0x415939ff
 label "  Connected to :\n  \[regsub Anchor_ \[value Tlink] \"\"]\n\n"
 note_font_size 20
 note_font_color 0xb26300ff
 xpos -2646
 ypos 4580
 hide_input true
 addUserKnob {20 Options}
 addUserKnob {1 Tlink l "" +STARTLINE +HIDDEN}
 Tlink Anchor_DGC_INPUT
 addUserKnob {22 duplicate l "Duplicate Link" -STARTLINE T anchorLink.LinkDot.duplicateLink(nuke.thisNode())}
 addUserKnob {22 connect l "Reconnect Selection" -STARTLINE T anchorLink.LinkDot.connect(nuke.selectedNodes())}
 addUserKnob {26 "Family OP"}
 addUserKnob {22 rename l Rename -STARTLINE T anchorLink.AnchorDot.renameByFamily(nuke.thisNode())}
 addUserKnob {22 select l Select -STARTLINE T anchorLink.AnchorDot.selectByFamily(nuke.thisNode())}
 addUserKnob {22 recolor l "Recolor from parent" -STARTLINE T anchorLink.AnchorDot.changeColorByFamily(nuke.thisNode())}
 addUserKnob {26 "Graph UI"}
 addUserKnob {22 showHide l "Show / hide inputs ALL" -STARTLINE T anchorLink.LinkDot.toggleInputs(nuke.allNodes('Dot'))}
 addUserKnob {26 "Navigate to"}
 addUserKnob {22 navParent l Anchor -STARTLINE T anchorLink.LinkDot.navToParent(nuke.thisNode())}
 addUserKnob {22 navCurrent l Link -STARTLINE T anchorLink.LinkDot.navToCurrent(nuke.thisNode())}
}
push $N45135600
Dot {
 name Link_src-master01-v3
 tile_color 0x415939ff
 label "  Connected to :\n  \[regsub Anchor_ \[value Tlink] \"\"]\n\n"
 note_font_size 20
 note_font_color 0xb26300ff
 xpos -3042
 ypos 3564
 hide_input true
 addUserKnob {20 Options}
 addUserKnob {1 Tlink l "" +STARTLINE +HIDDEN}
 Tlink Anchor_MASTER_INPUT
 addUserKnob {22 duplicate l "Duplicate Link" -STARTLINE T anchorLink.LinkDot.duplicateLink(nuke.thisNode())}
 addUserKnob {22 connect l "Reconnect Selection" -STARTLINE T anchorLink.LinkDot.connect(nuke.selectedNodes())}
 addUserKnob {26 "Family OP"}
 addUserKnob {22 rename l Rename -STARTLINE T anchorLink.AnchorDot.renameByFamily(nuke.thisNode())}
 addUserKnob {22 select l Select -STARTLINE T anchorLink.AnchorDot.selectByFamily(nuke.thisNode())}
 addUserKnob {22 recolor l "Recolor from parent" -STARTLINE T anchorLink.AnchorDot.changeColorByFamily(nuke.thisNode())}
 addUserKnob {26 "Graph UI"}
 addUserKnob {22 showHide l "Show / hide inputs ALL" -STARTLINE T anchorLink.LinkDot.toggleInputs(nuke.allNodes('Dot'))}
 addUserKnob {26 "Navigate to"}
 addUserKnob {22 navParent l Anchor -STARTLINE T anchorLink.LinkDot.navToParent(nuke.thisNode())}
 addUserKnob {22 navCurrent l Link -STARTLINE T anchorLink.LinkDot.navToCurrent(nuke.thisNode())}
}
LiveGroup {
 modified true
 version 125
 file /s/prods/colds/sequence/0089_mou/0089_mou_0010/common/mirror/0089_mou_0010-mirror-v001.nk
 advanced 1
 name ASSET_MIRROR1
 knobChanged "m=nuke.thisNode()\nm\['publish'].setVisible(False)\nm\['makeEditable'].setVisible(False)\nm\['file'].setVisible(False)\nm\['open'].setVisible(False)\nm\['render'].setVisible(False)\nm\['reading'].setVisible(False)\nm\['on_error'].setVisible(False)\nm\['reload_write'].setVisible(False)\nm\['advanced'].setVisible(False)\nm\['varProd'].setVisible(False)\nm\['varSeq'].setVisible(False)\nm\['varShot'].setVisible(False)"
 tile_color 0xff0000ff
 label "<font color = darkblue> <b><center><font size = 6>2D\n<font size = 4><font color = white>flip(x) =<font color = yellow>\[if \{\[value MirrorConfoDGC_DUPLICATE.flop] \} \{return MIRROR\} \{return NONE\}  ]\n<font color = white>flop(y) =  <font color = yellow>\[if \{\[value MirrorConfoDGC_DUPLICATE.flip] \} \{return MIRROR\} \{return NONE\}  ]"
 note_font_size 12
 note_font_color 0xffffffff
 xpos -3076
 ypos 3633
 disable {{"!\[file exists \[value file]]"}}
 addUserKnob {20 Mode l "MODE Users/Leads"}
 addUserKnob {4 ModeChoice l "Mode Choice" M {USERS LEADS}}
 ModeChoice USERS
 addUserKnob {20 varTab l variable}
 addUserKnob {1 varProd +HIDDEN}
 varProd colds
 addUserKnob {1 varSeq +HIDDEN}
 varSeq 0089_mou
 addUserKnob {1 varShot +HIDDEN}
 varShot 0089_mou_0010
}
end_group
OCIOColorSpace {
 in_colorspace scene_linear
 out_colorspace acescct
 name OCIOColorSpace1
 xpos -3076
 ypos 3800
}
LiveGroup {
 version 34
 file /s/prods/colds/sequence/0089_mou/0089_mou_0010/common/retime/0089_mou_0010-retime-v001.nk
 advanced 1
 name ASSET_RETIME1
 knobChanged "m=nuke.thisNode()\nm\['publish'].setVisible(False)\nm\['makeEditable'].setVisible(False)\nm\['file'].setVisible(False)\nm\['open'].setVisible(False)\nm\['render'].setVisible(False)\nm\['reading'].setVisible(False)\nm\['on_error'].setVisible(False)\nm\['reload_write'].setVisible(False)\nm\['advanced'].setVisible(False)\nm\['varProd'].setVisible(False)\nm\['varSeq'].setVisible(False)\nm\['varShot'].setVisible(False)"
 note_font_size 12
 note_font_color 0xffffffff
 xpos -3076
 ypos 3853
 disable {{"\[if \{\[file exists \[value file]] &&  \[value RETIME_ON_OFF.ChoiceRetime] != \"NONE\"\} \{return \"0\"\} \{return \"1\"\}]"}}
 addUserKnob {20 Mode l "MODE Users/Leads"}
 addUserKnob {4 ModeChoice l "Mode Choice" M {USERS LEADS}}
 ModeChoice USERS
 addUserKnob {20 varTab l variable}
 addUserKnob {1 varProd +HIDDEN}
 varProd colds
 addUserKnob {1 varSeq +HIDDEN}
 varSeq 0089_mou
 addUserKnob {1 varShot +HIDDEN}
 varShot 0089_mou_0010
}
 LiveInput {
  inputs 0
  liveGroup {{0}}
  shownWarningFile ""
  file ""
  name LiveInput1
  selected true
  xpos -3723
  ypos 1567
 }
 Dot {
  name Dot_Retime
  selected true
  xpos -3723
  ypos 1617
 }
 Output {
  name Output1
  selected true
  xpos -3723
  ypos 1667
 }
end_group
LiveGroup {
 published true
 version 92
 shownWarningFile ""
 file /s/prods/colds/sequence/0089_mou/0089_mou_0010/common/repo/0089_mou_0010-repo-v001.nk
 advanced 0
 output ""
 name ASSET_REPO
 label "<font color = red><center><b><font size = 6>\[if \{\[value invert_matrix] \} \{return INVERT\} \{return\}  ]<font color = yellow><center><b><font size = 6>\[value filter] "
 note_font_size 12
 note_font_color 0xffffffff
 xpos -3076
 ypos 3940
 disable {{"!\[file exists \[value file]]" x1416 1}}
 addUserKnob {20 Settings l "REPO Settings"}
 addUserKnob {41 invert_matrix l invert T TransformConfoCenter.invert_matrix +LIVE_OVERRIDE}
 invert_matrix false
 addUserKnob {41 filter T TransformConfoCenter.filter +LIVE_OVERRIDE}
 filter Lanczos4
 addUserKnob {20 Mode l "MODE Users/Leads"}
 addUserKnob {4 ModeChoice l "Mode Choice" M {USERS LEADS}}
 ModeChoice USERS
 addUserKnob {20 varTab l variable}
 addUserKnob {1 varProd +HIDDEN}
 varProd colds
 addUserKnob {1 varSeq +HIDDEN}
 varSeq 0089_mou
 addUserKnob {1 varShot +HIDDEN}
 varShot 0089_mou_0010
}
OCIOColorSpace {
 in_colorspace acescct
 out_colorspace scene_linear
 name OCIOColorSpace2
 xpos -3076
 ypos 4150
}
Dot {
 name Dot6
 xpos -3042
 ypos 4226
}
set N8f23cf00 [stack 0]
Dot {
 name Dot4
 xpos -2745
 ypos 4226
}
LiveGroup {
 modified true
 version 75
 file /s/prods/colds/sequence/common/confoCadre/ConfoCadre_01-v001.nk~
 advanced 1
 name ASSET_CONFOCADRE1
 note_font_size 12
 note_font_color 0xffffffff
 xpos -2779
 ypos 4272
 disable {{"!\[file exists \[value file]]" x1416 1}}
 addUserKnob {20 varTab l variable +INVISIBLE}
 addUserKnob {1 varProd}
 varProd colds
 addUserKnob {1 varSeq}
 varSeq 0089_mou
 addUserKnob {1 varShot}
 varShot 0089_mou_0010
}
 Input {
  inputs 0
  name Input1
  xpos -150
  ypos 150
 }
 Crop {
  box {416.0100098 0.01000022888 4192.009766 1582}
  reformat true
  crop false
  name Crop3
  xpos -150
  ypos 230
 }
 Reformat {
  black_outside true
  pbb true
  name Reformat6
  xpos -150
  ypos 310
 }
 Output {
  name Output1
  xpos -150
  ypos 390
 }
end_group
set N8f23f900 [stack 0]
Reformat {
 type "to box"
 box_width {{parent.Reformat2.box_width}}
 box_height {{parent.Reformat2.box_height}}
 box_fixed true
 name Reformat5
 label "Resize: \[value resize] - center: \[value center]\nFilter: \[value filter]"
 xpos -2779
 ypos 4353
}
OCIOLookTransform {
 in_colorspace scene_linear
 look SHOT_LOOK
 out_colorspace scene_linear
 key1 SHOT
 value1 "\[regexp -nocase -inline \{^\[a-z0-9_]+\} \[regexp -inline \{\[^/]+\$\} \[metadata input/filename]]]"
 name APPLY_SHOW_LUT1
 xpos -2779
 ypos 4501
}
Merge2 {
 inputs 2
 operation difference
 name Merge1
 xpos -2779
 ypos 4576
}
Write {
 file /s/prods/colds/sequence/0089_mou/0089_mou_0010/vzero/image/wip/0089_mou_0010-vzero-base-nk-VERIF_CONFO-v003-acescg-exr/0089_mou_0010-vzero-base-nk-VERIF_CONFO-v003-acescg.%04d.exr
 colorspace acescg
 file_type exr
 compression DWAA
 dw_compression_level 300
 metadata "all metadata"
 first_part rgba
 in_colorspace scene_linear
 out_colorspace scene_linear
 beforeRender miCreateFolders.miCreateFolders()
 beforeFrameRender nuke.memory('free')
 name VERIF_CONFO
 knobChanged nuke.thisNode().knob('dw_compression_level').setValue(300)
 tile_color 0xff880000
 label Bricks
 xpos -2777
 ypos 6278
 disable {{"\[if \{\[value RETIME_ON_OFF.ChoiceRetime] != \"NONE\"\} \{return \"0\"\} \{return \"1\"\}]"}}
 addUserKnob {20 mikWrite}
 addUserKnob {1 mikData l "" +STARTLINE +HIDDEN}
 mikData "\{\"type_source_selected\": \"root\", \"sources\": \{\"root\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[\"vzero\"], \"selected\": 0\}, \"Shot\": \{\"cache\": \"testvzero_010\", \"values\": \[\"0089_mou_0010\"], \"selected\": 0\}, \"name\": \{\"cache\": \"\", \"values\": \[\"0089_mou_0010\"], \"selected\": 0\}, \"Sequence\": \{\"cache\": \"testvzero\", \"values\": \[\"0089_mou\"], \"selected\": 0\}, \"syncWithComp\": \{\"cache\": \"\", \"values\": \[1], \"selected\": 0\}, \"colorspace\": \{\"cache\": \"acescg\", \"values\": \[\"acescg\"], \"selected\": 0\}, \"variant\": \{\"cache\": \"base\", \"values\": \[\"base\"], \"selected\": 0\}, \"render_source\": \{\"cache\": \"nk\", \"values\": \[\"nk\", \"nkmatte\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[\"VERIF_CONFO\"], \"selected\": 0\}, \"dwaCompLevel\": \{\"cache\": \"\", \"values\": \[\"45.0\"], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"exr\", \"values\": \[\"exr\"], \"selected\": 0\}, \"exrCompressionMode\": \{\"cache\": \"\", \"values\": \[\"None\"], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[3], \"selected\": 0\}, \"isElement\": \{\"cache\": \"\", \"values\": \[\"shot\", \"element\"], \"selected\": 0\}\}, \"assets\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"acescg\", \"values\": \[\"linear\", \"sRGB\", \"rec709\", \"Cineon\", \"Gamma1.8\", \"Gamma2.2\", \"Gamma2.4\", \"Gamma2.6\", \"Panalog\", \"REDLog\", \"ViperLog\", \"AlexaV3LogC\", \"PLogLin\", \"SLog\", \"SLog1\", \"SLog2\", \"SLog3\", \"CLog\", \"Log3G10\", \"Log3G12\", \"HybridLogGamma\", \"Protune\", \"BT1886\", \"st2084\", \"aces\", \"acescc\", \"acescct\", \"acesproxy\", \"acescg\", \"adx10\", \"adx16\", \"arri_v3logc_wg\", \"rec709_gamma22\", \"rec709_d60\", \"srgb8\", \"srgb_texture\", \"srgb_d60\", \"lmt_shaper\", \"log2_48_nits_shaper\", \"log2_48_nits_shaper_ap1\", \"linear_srgb\", \"raw\", \"dcdm_p3_clip\", \"p3dci\", \"rl3g10_rwg\", \"rwg_lin\", \"slog3_sgamutcine\"], \"selected\": 24\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"nk\", \"values\": \[\"nk\", \"nkmatte\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"exr\", \"values\": \[\"jpg\", \"dpx\", \"exr\", \"png\", \"tiff\", \"tga\"], \"selected\": 2\}, \"Asset\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"sg_asset_type\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}\}\}"
 addUserKnob {52 mikWriteUI l "" -STARTLINE T __import__('mikIO.ui.nuke.customKnobs.mikIOKnob').ui.nuke.customKnobs.mikIOKnob.MikWriteKnob()}
}
push $N45135600
Dot {
 name Link_src-master01-v2
 tile_color 0x415939ff
 label "  Connected to :\n  \[regsub Anchor_ \[value Tlink] \"\"]\n\n"
 note_font_size 20
 note_font_color 0xb26300ff
 xpos -2069
 ypos 3592
 hide_input true
 addUserKnob {20 Options}
 addUserKnob {1 Tlink l "" +STARTLINE +HIDDEN}
 Tlink Anchor_MASTER_INPUT
 addUserKnob {22 duplicate l "Duplicate Link" -STARTLINE T anchorLink.LinkDot.duplicateLink(nuke.thisNode())}
 addUserKnob {22 connect l "Reconnect Selection" -STARTLINE T anchorLink.LinkDot.connect(nuke.selectedNodes())}
 addUserKnob {26 "Family OP"}
 addUserKnob {22 rename l Rename -STARTLINE T anchorLink.AnchorDot.renameByFamily(nuke.thisNode())}
 addUserKnob {22 select l Select -STARTLINE T anchorLink.AnchorDot.selectByFamily(nuke.thisNode())}
 addUserKnob {22 recolor l "Recolor from parent" -STARTLINE T anchorLink.AnchorDot.changeColorByFamily(nuke.thisNode())}
 addUserKnob {26 "Graph UI"}
 addUserKnob {22 showHide l "Show / hide inputs ALL" -STARTLINE T anchorLink.LinkDot.toggleInputs(nuke.allNodes('Dot'))}
 addUserKnob {26 "Navigate to"}
 addUserKnob {22 navParent l Anchor -STARTLINE T anchorLink.LinkDot.navToParent(nuke.thisNode())}
 addUserKnob {22 navCurrent l Link -STARTLINE T anchorLink.LinkDot.navToCurrent(nuke.thisNode())}
}
Dot {
 name Dot56
 xpos -2069
 ypos 3742
}
set N8f219600 [stack 0]
Dot {
 name DOT_DENOISE_INPUT2
 label "DO NOT DELETE"
 xpos -2069
 ypos 4146
}
Group {
 name Group4
 xpos -2103
 ypos 4177
}
 Input {
  inputs 0
  name Input1
  xpos 509
  ypos -181
 }
 Add {
  value 0.005
  name Add1
  xpos 509
  ypos -141
 }
 OFXcom.absoft.neatvideo4_v4 {
  DNP 
  NFP ODA1APotAAAAAAAAAAABAAAAAACAP2ZmZj8zM3M/ZmZmP5qZmT+amZk/AACAPwAAgD8AAIA/AAAAAAAAAAAAAIA/AACAPwAAgD8AAIA/AACAPwAAgD8BAAAAAADAPwAAwD8AAIA/AACAPwAAgD8AAAAAAAAAP5qZmT4AAAAAAAAAAAAAgD8AAAAAAAAAAAAAgD8AAIA/AACAPwAAgD8AAQAAAACAPwAAAAAAAAAAAACAPwAAAAAAAAAAAQABAQEBAQEBAQAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAQAABAAAAAAAgD8AAAAAAAAAAAAAwD8AAAAAAAAAAAAAAD8BAQABAQEAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAQD8AAIA/AACAPwAAgD8BAAAAAAAAAM3MTD4AAIA/AQAAAAAAAACamVkgw
  ParamsHash1 -552906290
  ParamsHash2 260
  ParamsHash3 0
  name "Reduce Noise v4_1"
  xpos 509
  ypos -69
 }
 Add {
  value -0.005
  name Add2
  xpos 509
  ypos -6
 }
 Output {
  name Output1
  xpos 509
  ypos 94
 }
end_group
Dot {
 name DOT_DENOISE_OUTPUT2
 label "DO NOT DELETE"
 xpos -2069
 ypos 4230
}
LiveGroup {
 version 34
 file /s/prods/colds/sequence/0089_mou/0089_mou_0010/common/retime/0089_mou_0010-retime-v001.nk
 advanced 1
 name ASSET_RETIME9
 knobChanged "m=nuke.thisNode()\nm\['publish'].setVisible(False)\nm\['makeEditable'].setVisible(False)\nm\['file'].setVisible(False)\nm\['open'].setVisible(False)\nm\['render'].setVisible(False)\nm\['reading'].setVisible(False)\nm\['on_error'].setVisible(False)\nm\['reload_write'].setVisible(False)\nm\['advanced'].setVisible(False)\nm\['varProd'].setVisible(False)\nm\['varSeq'].setVisible(False)\nm\['varShot'].setVisible(False)"
 note_font_size 12
 note_font_color 0xffffffff
 xpos -2103
 ypos 4428
 disable {{!RETIME_ON_OFF.ChoiceRetime}}
 addUserKnob {20 Mode l "MODE Users/Leads"}
 addUserKnob {4 ModeChoice l "Mode Choice" M {USERS LEADS}}
 ModeChoice USERS
 addUserKnob {20 varTab l variable}
 addUserKnob {1 varProd +HIDDEN}
 varProd colds
 addUserKnob {1 varSeq +HIDDEN}
 varSeq 0089_mou
 addUserKnob {1 varShot +HIDDEN}
 varShot 0089_mou_0010
}
 LiveInput {
  inputs 0
  liveGroup {{0}}
  shownWarningFile ""
  file ""
  name LiveInput1
  selected true
  xpos -3723
  ypos 1567
 }
 Dot {
  name Dot_Retime
  selected true
  xpos -3723
  ypos 1617
 }
 Output {
  name Output1
  selected true
  xpos -3723
  ypos 1667
 }
end_group
Dot {
 name Dot52
 xpos -2069
 ypos 4531
}
set N8f1ca400 [stack 0]
Log2Lin {
 operation lin2log
 name Log2Lin1
 xpos -2103
 ypos 4549
}
LiveGroup {
 modified true
 version 106
 file /s/prods/colds/sequence/0089_mou/0089_mou_0010/common/disto_node/0089_mou_0010-disto_node-v001.nk
 advanced 1
 name ASSET_DISTO1
 knobChanged "m=nuke.thisNode()\nm\['publish'].setVisible(False)\nm\['makeEditable'].setVisible(False)\nm\['file'].setVisible(False)\nm\['open'].setVisible(False)\nm\['render'].setVisible(False)\nm\['reading'].setVisible(False)\nm\['on_error'].setVisible(False)\nm\['reload_write'].setVisible(False)\nm\['advanced'].setVisible(False)\nm\['varProd'].setVisible(False)\nm\['varSeq'].setVisible(False)\nm\['varShot'].setVisible(False)\nnuke.thisNode().begin()\nfor i in nuke.allNodes():\n    if i.knob('direction'):\n        nuke.thisNode().knob('direction').setValue(i.knob('direction').value())\n    if i.knob('filter'):\n        nuke.thisNode().knob('filter').setValue(i.knob('filter').value())\nnuke.thisNode().end()"
 label "<font color = yellow><b><font size = 6>\[value direction]\n\[value filter]"
 note_font_size 12
 note_font_color 0xffffffff
 xpos -2103
 ypos 4602
 disable {{"\[if \{\[file exists \[value file]] &&  \[value CG_ON_OFF.CG_on_off] != \"NONE\"\} \{return \"0\"\} \{return \"1\"\}]"}}
 addUserKnob {20 Settings l "DISTO Settings"}
 addUserKnob {1 direction}
 direction ""
 addUserKnob {1 filter}
 filter ""
 addUserKnob {20 Mode l "MODE Users/Leads"}
 addUserKnob {4 ModeChoice l "Mode Choice" M {USERS LEADS}}
 ModeChoice USERS
 addUserKnob {20 varTab l variable}
 addUserKnob {4 filter_disto l Filter M {impulse cubic Keys Simon Rifman Mitchell Parzen notch Lanczos4 Lanczos6 sinc4 ""}}
 filter_disto cubic
 addUserKnob {22 add_filter_1 l "Apply Filter" T "node = nuke.thisNode()\nfilter_value = node\[\"filter_disto\"].value()\nnode.begin()\nfor i in nuke.allNodes():\n    if i.knob(\"filter\"):\n        i.knob(\"filter\").setValue(filter_value)\nnode.end()\nnode\[\"filter\"].setValue(filter_value)" +STARTLINE}
 addUserKnob {1 varProd +HIDDEN}
 varProd colds
 addUserKnob {1 varSeq +HIDDEN}
 varSeq 0089_mou
 addUserKnob {1 varShot +HIDDEN}
 varShot 0089_mou_0010
}
end_group
Log2Lin {
 name Log2Lin2
 xpos -2103
 ypos 4687
}
Dot {
 name Dot53
 xpos -2069
 ypos 4721
}
Reformat {
 type "to box"
 box_width {{"max(bbox.r-width, -bbox.x)*2+width"}}
 box_height {{"max(bbox.t-height, -bbox.y)*2+height"}}
 box_fixed true
 resize none
 pbb true
 name Reformat2bbox2
 xpos -2103
 ypos 4786
}
Dot {
 name Dot54
 xpos -2069
 ypos 6199
}
set N8f19cf00 [stack 0]
Write {
 file /s/prods/colds/sequence/0089_mou/0089_mou_0010/vzero/image/wip/0089_mou_0010-vzero-base-nk-RETIME_UNDISTO_REFORMAT-v003-linear-exr/0089_mou_0010-vzero-base-nk-RETIME_UNDISTO_REFORMAT-v003-linear.%04d.exr
 colorspace linear
 file_type exr
 dw_compression_level 16
 metadata "all metadata"
 first_part rgba
 create_directories true
 in_colorspace scene_linear
 out_colorspace scene_linear
 beforeRender miCreateFolders.miCreateFolders()
 beforeFrameRender nuke.memory('free')
 name RETIME_UNDISTO_REFORMAT
 tile_color 0xff880000
 label Bricks
 xpos -2103
 ypos 6301
 disable {{"!(RETIME_ON_OFF.ChoiceRetime && DMP_ON_OFF.DMP_on_off)"}}
 addUserKnob {20 mikWrite}
 addUserKnob {1 mikData l "" +STARTLINE +HIDDEN}
 mikData "\{\"type_source_selected\": \"root\", \"sources\": \{\"root\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[\"vzero\"], \"selected\": 0\}, \"Shot\": \{\"cache\": \"np_3240\", \"values\": \[\"0089_mou_0010\"], \"selected\": 0\}, \"name\": \{\"cache\": \"\", \"values\": \[\"0089_mou_0010\"], \"selected\": 0\}, \"Sequence\": \{\"cache\": \"np\", \"values\": \[\"0089_mou\"], \"selected\": 0\}, \"variant\": \{\"cache\": \"base\", \"values\": \[\"base\"], \"selected\": 0\}, \"colorspace\": \{\"cache\": \"linear\", \"values\": \[\"linear\"], \"selected\": 0\}, \"syncWithComp\": \{\"cache\": \"\", \"values\": \[1], \"selected\": 0\}, \"render_source\": \{\"cache\": \"nk\", \"values\": \[\"nk\", \"nkmatte\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[\"RETIME_UNDISTO_REFORMAT\"], \"selected\": 0\}, \"dwaCompLevel\": \{\"cache\": \"\", \"values\": \[\"16\"], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"exr\", \"values\": \[\"exr\"], \"selected\": 0\}, \"exrCompressionMode\": \{\"cache\": \"\", \"values\": \[\"None\"], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[3], \"selected\": 0\}, \"isElement\": \{\"cache\": \"\", \"values\": \[\"shot\", \"element\"], \"selected\": 0\}\}, \"assets\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"linear\", \"values\": \[\"linear\", \"sRGB\", \"rec709\", \"Cineon\", \"Gamma1.8\", \"Gamma2.2\", \"Gamma2.4\", \"Gamma2.6\", \"Panalog\", \"REDLog\", \"ViperLog\", \"AlexaV3LogC\", \"PLogLin\", \"SLog\", \"SLog1\", \"SLog2\", \"SLog3\", \"CLog\", \"Log3G10\", \"Log3G12\", \"HybridLogGamma\", \"Protune\", \"BT1886\", \"st2084\", \"srgb8\", \"cineon\", \"logc\", \"gamma22\", \"gamma24\", \"slog3\", \"p3d60\", \"log3g10\"], \"selected\": 0\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"nk\", \"values\": \[\"nk\", \"nkmatte\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"exr\", \"values\": \[\"jpg\", \"dpx\", \"exr\", \"png\", \"tiff\", \"tga\"], \"selected\": 2\}, \"Asset\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"sg_asset_type\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}\}\}"
 addUserKnob {52 mikWriteUI l "" -STARTLINE T __import__('mikIO.ui.nuke.customKnobs.mikIOKnob').ui.nuke.customKnobs.mikIOKnob.MikWriteKnob()}
}
push $N8f19cf00
Dot {
 name Dot55
 xpos -1937
 ypos 6199
}
Write {
 file /s/prods/colds/sequence/0089_mou/0089_mou_0010/vzero/image/wip/0089_mou_0010-vzero-base-nk-UNDISTO_REFORMAT-v003-linear-exr/0089_mou_0010-vzero-base-nk-UNDISTO_REFORMAT-v003-linear.%04d.exr
 colorspace linear
 file_type exr
 dw_compression_level 16
 metadata "all metadata"
 first_part rgba
 create_directories true
 in_colorspace scene_linear
 out_colorspace scene_linear
 beforeRender miCreateFolders.miCreateFolders()
 beforeFrameRender nuke.memory('free')
 name UNDISTO_REFORMAT
 tile_color 0xff880000
 label Bricks
 xpos -1971
 ypos 6298
 disable {{"!(!RETIME_ON_OFF.ChoiceRetime && DMP_ON_OFF.DMP_on_off)"}}
 addUserKnob {20 mikWrite}
 addUserKnob {1 mikData l "" +STARTLINE +HIDDEN}
 mikData "\{\"type_source_selected\": \"root\", \"sources\": \{\"root\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[\"vzero\"], \"selected\": 0\}, \"Shot\": \{\"cache\": \"np_3240\", \"values\": \[\"0089_mou_0010\"], \"selected\": 0\}, \"name\": \{\"cache\": \"\", \"values\": \[\"0089_mou_0010\"], \"selected\": 0\}, \"Sequence\": \{\"cache\": \"np\", \"values\": \[\"0089_mou\"], \"selected\": 0\}, \"variant\": \{\"cache\": \"base\", \"values\": \[\"base\"], \"selected\": 0\}, \"colorspace\": \{\"cache\": \"linear\", \"values\": \[\"linear\"], \"selected\": 0\}, \"syncWithComp\": \{\"cache\": \"\", \"values\": \[1], \"selected\": 0\}, \"render_source\": \{\"cache\": \"nk\", \"values\": \[\"nk\", \"nkmatte\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[\"UNDISTO_REFORMAT\"], \"selected\": 0\}, \"dwaCompLevel\": \{\"cache\": \"\", \"values\": \[\"16\"], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"exr\", \"values\": \[\"exr\"], \"selected\": 0\}, \"exrCompressionMode\": \{\"cache\": \"\", \"values\": \[\"None\"], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[3], \"selected\": 0\}, \"isElement\": \{\"cache\": \"\", \"values\": \[\"shot\", \"element\"], \"selected\": 0\}\}, \"assets\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"linear\", \"values\": \[\"linear\", \"sRGB\", \"rec709\", \"Cineon\", \"Gamma1.8\", \"Gamma2.2\", \"Gamma2.4\", \"Gamma2.6\", \"Panalog\", \"REDLog\", \"ViperLog\", \"AlexaV3LogC\", \"PLogLin\", \"SLog\", \"SLog1\", \"SLog2\", \"SLog3\", \"CLog\", \"Log3G10\", \"Log3G12\", \"HybridLogGamma\", \"Protune\", \"BT1886\", \"st2084\", \"srgb8\", \"cineon\", \"logc\", \"gamma22\", \"gamma24\", \"slog3\", \"p3d60\", \"log3g10\"], \"selected\": 0\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"nk\", \"values\": \[\"nk\", \"nkmatte\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"exr\", \"values\": \[\"jpg\", \"dpx\", \"exr\", \"png\", \"tiff\", \"tga\"], \"selected\": 2\}, \"Asset\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"sg_asset_type\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}\}\}"
 addUserKnob {52 mikWriteUI l "" -STARTLINE T __import__('mikIO.ui.nuke.customKnobs.mikIOKnob').ui.nuke.customKnobs.mikIOKnob.MikWriteKnob()}
}
push $N8f1ca400
Dot {
 name Dot24
 xpos -1711
 ypos 4531
}
Write {
 file /s/prods/colds/sequence/0089_mou/0089_mou_0010/vzero/image/wip/0089_mou_0010-vzero-base-nk-DGN_RETIME-v003-acescg-exr/0089_mou_0010-vzero-base-nk-DGN_RETIME-v003-acescg.%04d.exr
 colorspace acescg
 file_type exr
 compression DWAA
 dw_compression_level 0
 metadata "all metadata"
 first_part rgba
 create_directories true
 version 1
 in_colorspace scene_linear
 out_colorspace scene_linear
 beforeRender miCreateFolders.miCreateFolders()
 name DGN_RETIME
 tile_color 0xff880000
 label Bricks
 xpos -1745
 ypos 6277
 disable {{"\[if \{\[value RETIME_ON_OFF.ChoiceRetime] != \"NONE\" &&  \[value DGN_ON_OFF.dgn_on_off] != \"NONE\"\} \{return \"0\"\} \{return \"1\"\}]"}}
 addUserKnob {20 mikWrite}
 addUserKnob {1 mikData l "" +STARTLINE +HIDDEN}
 mikData "\{\"type_source_selected\": \"root\", \"sources\": \{\"root\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[\"vzero\"], \"selected\": 0\}, \"Shot\": \{\"cache\": \"001_060\", \"values\": \[\"0089_mou_0010\"], \"selected\": 0\}, \"name\": \{\"cache\": \"\", \"values\": \[\"0089_mou_0010\"], \"selected\": 0\}, \"Sequence\": \{\"cache\": \"001\", \"values\": \[\"0089_mou\"], \"selected\": 0\}, \"variant\": \{\"cache\": \"base\", \"values\": \[\"base\"], \"selected\": 0\}, \"colorspace\": \{\"cache\": \"acescg\", \"values\": \[\"acescg\"], \"selected\": 0\}, \"syncWithComp\": \{\"cache\": \"\", \"values\": \[1], \"selected\": 0\}, \"render_source\": \{\"cache\": \"nk\", \"values\": \[\"nk\", \"nkmatte\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[\"DGN_RETIME\"], \"selected\": 0\}, \"dwaCompLevel\": \{\"cache\": \"\", \"values\": \[\"0\"], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"exr\", \"values\": \[\"exr\"], \"selected\": 0\}, \"exrCompressionMode\": \{\"cache\": \"\", \"values\": \[\"None\"], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[3], \"selected\": 0\}, \"isElement\": \{\"cache\": \"\", \"values\": \[\"shot\", \"element\"], \"selected\": 0\}\}, \"assets\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"acescg\", \"values\": \[\"linear\", \"sRGB\", \"rec709\", \"Cineon\", \"Gamma1.8\", \"Gamma2.2\", \"Gamma2.4\", \"Gamma2.6\", \"Panalog\", \"REDLog\", \"ViperLog\", \"AlexaV3LogC\", \"PLogLin\", \"SLog\", \"SLog1\", \"SLog2\", \"SLog3\", \"CLog\", \"Log3G10\", \"Log3G12\", \"HybridLogGamma\", \"Protune\", \"BT1886\", \"st2084\", \"aces\", \"acescc\", \"acescct\", \"acesproxy\", \"acescg\", \"adx10\", \"adx16\", \"arri_v3logc_wg\", \"rec709_gamma22\", \"rec709_d60\", \"srgb8\", \"srgb_texture\", \"srgb_d60\", \"lmt_shaper\", \"log2_48_nits_shaper\", \"log2_48_nits_shaper_ap1\", \"linear_srgb\", \"raw\", \"dcdm_p3_clip\", \"p3dci\", \"rl3g10_rwg\", \"rwg_lin\", \"slog3_sgamutcine\"], \"selected\": 24\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"nk\", \"values\": \[\"nk\", \"nkmatte\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"exr\", \"values\": \[\"jpg\", \"dpx\", \"exr\", \"png\", \"tiff\", \"tga\"], \"selected\": 2\}, \"Asset\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"sg_asset_type\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}\}\}"
 addUserKnob {52 mikWriteUI l "" -STARTLINE T __import__('mikIO.ui.nuke.customKnobs.mikIOKnob').ui.nuke.customKnobs.mikIOKnob.MikWriteKnob()}
}
push $N8f219600
Dot {
 name Dot2
 xpos -1543
 ypos 3742
}
set N8f17cf00 [stack 0]
Dot {
 name Dot5
 xpos -1349
 ypos 3742
}
LiveGroup {
 version 34
 file /s/prods/colds/sequence/0089_mou/0089_mou_0010/common/retime/0089_mou_0010-retime-v001.nk
 advanced 1
 name ASSET_RETIME5
 knobChanged "m=nuke.thisNode()\nm\['publish'].setVisible(False)\nm\['makeEditable'].setVisible(False)\nm\['file'].setVisible(False)\nm\['open'].setVisible(False)\nm\['render'].setVisible(False)\nm\['reading'].setVisible(False)\nm\['on_error'].setVisible(False)\nm\['reload_write'].setVisible(False)\nm\['advanced'].setVisible(False)\nm\['varProd'].setVisible(False)\nm\['varSeq'].setVisible(False)\nm\['varShot'].setVisible(False)"
 note_font_size 12
 note_font_color 0xffffffff
 xpos -1383
 ypos 4498
 disable {{!RETIME_ON_OFF.ChoiceRetime}}
 addUserKnob {20 Mode l "MODE Users/Leads"}
 addUserKnob {4 ModeChoice l "Mode Choice" M {USERS LEADS}}
 ModeChoice USERS
 addUserKnob {20 varTab l variable}
 addUserKnob {1 varProd +HIDDEN}
 varProd colds
 addUserKnob {1 varSeq +HIDDEN}
 varSeq 0089_mou
 addUserKnob {1 varShot +HIDDEN}
 varShot 0089_mou_0010
}
 LiveInput {
  inputs 0
  liveGroup {{0}}
  shownWarningFile ""
  file ""
  name LiveInput1
  selected true
  xpos -3723
  ypos 1567
 }
 Dot {
  name Dot_Retime
  selected true
  xpos -3723
  ypos 1617
 }
 Output {
  name Output1
  selected true
  xpos -3723
  ypos 1667
 }
end_group
Write {
 file /s/prods/colds/sequence/0089_mou/0089_mou_0010/vzero/image/wip/0089_mou_0010-vzero-base-nk-RETIME-v003-acescg-exr/0089_mou_0010-vzero-base-nk-RETIME-v003-acescg.%04d.exr
 colorspace acescg
 file_type exr
 compression DWAA
 dw_compression_level 0
 metadata "all metadata"
 first_part rgba
 create_directories true
 version 1
 in_colorspace scene_linear
 out_colorspace scene_linear
 beforeRender miCreateFolders.miCreateFolders()
 name RETIME
 tile_color 0xff880000
 label Bricks
 xpos -1383
 ypos 6274
 disable {{!RETIME_ON_OFF.ChoiceRetime}}
 addUserKnob {20 mikWrite}
 addUserKnob {1 mikData l "" +STARTLINE +HIDDEN}
 mikData "\{\"type_source_selected\": \"root\", \"sources\": \{\"root\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[\"vzero\"], \"selected\": 0\}, \"Shot\": \{\"cache\": \"001_060\", \"values\": \[\"0089_mou_0010\"], \"selected\": 0\}, \"name\": \{\"cache\": \"\", \"values\": \[\"0089_mou_0010\"], \"selected\": 0\}, \"Sequence\": \{\"cache\": \"001\", \"values\": \[\"0089_mou\"], \"selected\": 0\}, \"syncWithComp\": \{\"cache\": \"\", \"values\": \[1], \"selected\": 0\}, \"colorspace\": \{\"cache\": \"acescg\", \"values\": \[\"acescg\"], \"selected\": 0\}, \"variant\": \{\"cache\": \"base\", \"values\": \[\"base\"], \"selected\": 0\}, \"render_source\": \{\"cache\": \"nk\", \"values\": \[\"nk\", \"nkmatte\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[\"RETIME\"], \"selected\": 0\}, \"dwaCompLevel\": \{\"cache\": \"\", \"values\": \[\"0\"], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"exr\", \"values\": \[\"exr\"], \"selected\": 0\}, \"exrCompressionMode\": \{\"cache\": \"\", \"values\": \[\"None\"], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[3], \"selected\": 0\}, \"isElement\": \{\"cache\": \"\", \"values\": \[\"shot\", \"element\"], \"selected\": 0\}\}, \"assets\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"acescg\", \"values\": \[\"linear\", \"sRGB\", \"rec709\", \"Cineon\", \"Gamma1.8\", \"Gamma2.2\", \"Gamma2.4\", \"Gamma2.6\", \"Panalog\", \"REDLog\", \"ViperLog\", \"AlexaV3LogC\", \"PLogLin\", \"SLog\", \"SLog1\", \"SLog2\", \"SLog3\", \"CLog\", \"Log3G10\", \"Log3G12\", \"HybridLogGamma\", \"Protune\", \"BT1886\", \"st2084\", \"aces\", \"acescc\", \"acescct\", \"acesproxy\", \"acescg\", \"adx10\", \"adx16\", \"arri_v3logc_wg\", \"rec709_gamma22\", \"rec709_d60\", \"srgb8\", \"srgb_texture\", \"srgb_d60\", \"lmt_shaper\", \"log2_48_nits_shaper\", \"log2_48_nits_shaper_ap1\", \"linear_srgb\", \"raw\", \"dcdm_p3_clip\", \"p3dci\", \"rl3g10_rwg\", \"rwg_lin\", \"slog3_sgamutcine\"], \"selected\": 24\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"nk\", \"values\": \[\"nk\", \"nkmatte\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"exr\", \"values\": \[\"jpg\", \"dpx\", \"exr\", \"png\", \"tiff\", \"tga\"], \"selected\": 2\}, \"Asset\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"sg_asset_type\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}\}\}"
 addUserKnob {52 mikWriteUI l "" -STARTLINE T __import__('mikIO.ui.nuke.customKnobs.mikIOKnob').ui.nuke.customKnobs.mikIOKnob.MikWriteKnob()}
}
push $N45137200
Dot {
 name Link_PLATE_INPUT3
 tile_color 0x4cff5bff
 label "  Connected to :\n  \[regsub Anchor_ \[value Tlink] \"\"]"
 note_font_size 20
 note_font_color 0xb26300ff
 xpos -303
 ypos 3594
 hide_input true
 addUserKnob {20 Options}
 addUserKnob {1 Tlink l "" +STARTLINE +HIDDEN}
 Tlink Anchor_PLATE_INPUT
 addUserKnob {22 duplicate l "Duplicate Link" -STARTLINE T anchorLink.LinkDot.duplicateLink(nuke.thisNode())}
 addUserKnob {22 connect l "Reconnect Selection" -STARTLINE T anchorLink.LinkDot.connect(nuke.selectedNodes())}
 addUserKnob {26 "Family OP"}
 addUserKnob {22 rename l Rename -STARTLINE T anchorLink.AnchorDot.renameByFamily(nuke.thisNode())}
 addUserKnob {22 select l Select -STARTLINE T anchorLink.AnchorDot.selectByFamily(nuke.thisNode())}
 addUserKnob {26 "Graph UI"}
 addUserKnob {22 showHide l "Show / hide inputs ALL" -STARTLINE T anchorLink.LinkDot.toggleInputs(nuke.allNodes('Dot'))}
 addUserKnob {26 "Navigate to"}
 addUserKnob {22 navParent l Anchor -STARTLINE T anchorLink.LinkDot.navToParent(nuke.thisNode())}
 addUserKnob {22 navCurrent l Link -STARTLINE T anchorLink.LinkDot.navToCurrent(nuke.thisNode())}
}
Dot {
 name DOT_DENOISE_INPUT3
 label "DO NOT DELETE"
 xpos -303
 ypos 4364
}
Group {
 name Group2
 xpos -333
 ypos 4384
}
 Input {
  inputs 0
  name Input1
  xpos 509
  ypos -181
 }
 Add {
  value 0.005
  name Add1
  xpos 509
  ypos -141
 }
 OFXcom.absoft.neatvideo4_v4 {
  DNP 
  NFP ODA1APotAAAAAAAAAAABAAAAAACAP2ZmZj8zM3M/ZmZmP5qZmT+amZk/AACAPwAAgD8AAIA/AAAAAAAAAAAAAIA/AACAPwAAgD8AAIA/AACAPwAAgD8BAAAAAADAPwAAwD8AAIA/AACAPwAAgD8AAAAAAAAAP5qZmT4AAAAAAAAAAAAAgD8AAAAAAAAAAAAAgD8AAIA/AACAPwAAgD8AAQAAAACAPwAAAAAAAAAAAACAPwAAAAAAAAAAAQABAQEBAQEBAQAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAQAABAAAAAAAgD8AAAAAAAAAAAAAwD8AAAAAAAAAAAAAAD8BAQABAQEAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAQD8AAIA/AACAPwAAgD8BAAAAAAAAAM3MTD4AAIA/AQAAAAAAAACamVkgw
  ParamsHash1 -552906290
  ParamsHash2 260
  ParamsHash3 0
  name "Reduce Noise v4_1"
  xpos 509
  ypos -69
 }
 Add {
  value -0.005
  name Add2
  xpos 509
  ypos -6
 }
 Output {
  name Output1
  xpos 509
  ypos 94
 }
end_group
Dot {
 name DOT_DENOISE_OUTPUT3
 label "DO NOT DELETE"
 xpos -303
 ypos 4427
}
Write {
 file /s/prods/colds/sequence/0089_mou/0089_mou_0010/vzero/image/wip/0089_mou_0010-vzero-base-nk-DGN_PLATE-v003-acescg-exr/0089_mou_0010-vzero-base-nk-DGN_PLATE-v003-acescg.%04d.exr
 colorspace acescg
 file_type exr
 compression "PIZ Wavelet (32 scanlines)"
 dw_compression_level 0
 metadata "all metadata"
 first_part rgba
 create_directories true
 version 1
 in_colorspace scene_linear
 out_colorspace scene_linear
 beforeRender miCreateFolders.miCreateFolders()
 name DGN_PLATE
 tile_color 0xff880000
 label Bricks
 xpos -337
 ypos 6299
 disable {{"!(\[string  equal \[value DGN_ON_OFF.dgn_on_off] DGN] && \[exists \[node Anchor_PLATE_INPUT].input])"}}
 addUserKnob {20 mikWrite}
 addUserKnob {1 mikData l "" +STARTLINE +HIDDEN}
 mikData "\{\"type_source_selected\": \"root\", \"sources\": \{\"root\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[\"vzero\"], \"selected\": 0\}, \"Shot\": \{\"cache\": \"001_060\", \"values\": \[\"0089_mou_0010\"], \"selected\": 0\}, \"name\": \{\"cache\": \"\", \"values\": \[\"0089_mou_0010\"], \"selected\": 0\}, \"Sequence\": \{\"cache\": \"001\", \"values\": \[\"0089_mou\"], \"selected\": 0\}, \"variant\": \{\"cache\": \"base\", \"values\": \[\"base\"], \"selected\": 0\}, \"colorspace\": \{\"cache\": \"acescg\", \"values\": \[\"acescg\"], \"selected\": 0\}, \"syncWithComp\": \{\"cache\": \"\", \"values\": \[1], \"selected\": 0\}, \"render_source\": \{\"cache\": \"nk\", \"values\": \[\"nk\", \"nkmatte\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[\"DGN_PLATE\"], \"selected\": 0\}, \"dwaCompLevel\": \{\"cache\": \"\", \"values\": \[\"0\"], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"exr\", \"values\": \[\"exr\"], \"selected\": 0\}, \"exrCompressionMode\": \{\"cache\": \"\", \"values\": \[\"None\"], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[3], \"selected\": 0\}, \"isElement\": \{\"cache\": \"\", \"values\": \[\"shot\", \"element\"], \"selected\": 0\}\}, \"assets\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"acescg\", \"values\": \[\"linear\", \"sRGB\", \"rec709\", \"Cineon\", \"Gamma1.8\", \"Gamma2.2\", \"Gamma2.4\", \"Gamma2.6\", \"Panalog\", \"REDLog\", \"ViperLog\", \"AlexaV3LogC\", \"PLogLin\", \"SLog\", \"SLog1\", \"SLog2\", \"SLog3\", \"CLog\", \"Log3G10\", \"Log3G12\", \"HybridLogGamma\", \"Protune\", \"BT1886\", \"st2084\", \"aces\", \"acescc\", \"acescct\", \"acesproxy\", \"acescg\", \"adx10\", \"adx16\", \"arri_v3logc_wg\", \"rec709_gamma22\", \"rec709_d60\", \"srgb8\", \"srgb_texture\", \"srgb_d60\", \"lmt_shaper\", \"log2_48_nits_shaper\", \"log2_48_nits_shaper_ap1\", \"linear_srgb\", \"raw\", \"dcdm_p3_clip\", \"p3dci\", \"rl3g10_rwg\", \"rwg_lin\", \"slog3_sgamutcine\"], \"selected\": 24\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"nk\", \"values\": \[\"nk\", \"nkmatte\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"exr\", \"values\": \[\"jpg\", \"dpx\", \"exr\", \"png\", \"tiff\", \"tga\"], \"selected\": 2\}, \"Asset\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"sg_asset_type\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}\}\}"
 addUserKnob {52 mikWriteUI l "" -STARTLINE T __import__('mikIO.ui.nuke.customKnobs.mikIOKnob').ui.nuke.customKnobs.mikIOKnob.MikWriteKnob()}
}
Dot {
 inputs 0
 name Dot_Retime
 xpos -3723
 ypos 1617
}
push $N45135600
Dot {
 name Link_src-master01-v5
 tile_color 0x415939ff
 label "  Connected to :\n  \[regsub Anchor_ \[value Tlink] \"\"]\n\n"
 note_font_size 20
 note_font_color 0xb26300ff
 xpos -2052
 ypos -1626
 hide_input true
 addUserKnob {20 Options}
 addUserKnob {1 Tlink l "" +STARTLINE +HIDDEN}
 Tlink Anchor_MASTER_INPUT
 addUserKnob {22 duplicate l "Duplicate Link" -STARTLINE T anchorLink.LinkDot.duplicateLink(nuke.thisNode())}
 addUserKnob {22 connect l "Reconnect Selection" -STARTLINE T anchorLink.LinkDot.connect(nuke.selectedNodes())}
 addUserKnob {26 "Family OP"}
 addUserKnob {22 rename l Rename -STARTLINE T anchorLink.AnchorDot.renameByFamily(nuke.thisNode())}
 addUserKnob {22 select l Select -STARTLINE T anchorLink.AnchorDot.selectByFamily(nuke.thisNode())}
 addUserKnob {22 recolor l "Recolor from parent" -STARTLINE T anchorLink.AnchorDot.changeColorByFamily(nuke.thisNode())}
 addUserKnob {26 "Graph UI"}
 addUserKnob {22 showHide l "Show / hide inputs ALL" -STARTLINE T anchorLink.LinkDot.toggleInputs(nuke.allNodes('Dot'))}
 addUserKnob {26 "Navigate to"}
 addUserKnob {22 navParent l Anchor -STARTLINE T anchorLink.LinkDot.navToParent(nuke.thisNode())}
 addUserKnob {22 navCurrent l Link -STARTLINE T anchorLink.LinkDot.navToCurrent(nuke.thisNode())}
}
Group {
 name Group1
 xpos -2086
 ypos -1473
}
 Input {
  inputs 0
  name Input1
  xpos 228
  ypos -252
 }
 Add {
  value 0.01
  name Add3
  xpos 228
  ypos -212
 }
 OFXcom.absoft.neatvideo4_v4 {
  DNP 
  NFP ODA1APotAAAAAAAAAAABAAAAAACAP2Zmhj/NzIw/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AAAAAAAAAAAAAIA/AACAPwAAgD8AAIA/AACAPwAAgD8BAAAAAADAPwAAwD8AAIA/AACAPwAAgD8BAAAAAAAAP5qZmT6amRk+AAAAAAAAgD8AAAAAAAAAAAAAgD8AAIA/AACAPwAAgD8AAQAAAACAPwAAAAAAAAAAAACAPwAAAAAAAAAAAQABAQEBAQEBAQAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAwAAAAAAgD8AAAAAAAAAAAAAwD8BAAAAAAAAAAAAAD8BAAEBAQEAAAAAAAAAAAAAAAAAAAEAAAABAAAAAAAAAAAAQD8AAIA/AACAPwAAgD8BAAAAAAAAAAAAgD8AAIA/AQAAAAAAAACamVk/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADgw
  ParamsHash1 1061426009
  ParamsHash2 260
  ParamsHash3 0
  name "Reduce Noise v4_2"
  xpos 228
  ypos -147
 }
 Add {
  value -0.01
  name Add4
  xpos 228
  ypos -90
 }
 Output {
  name Output1
  xpos 228
  ypos 10
 }
end_group
Transform {
 inputs 0
 translate {{curve x1001 0 x1434 227} {curve x1001 0 x1434 -0}}
 scale {{curve x1001 1 x1434 1.201}}
 center {2304 791}
 shutteroffset centred
 name TransformConfoCenter
 xpos -4459
 ypos 2144
}
push $N8f23cf00
Dot {
 name OUT_INPUT
 tile_color 0x3b1011ff
 xpos -3042
 ypos 6176
}
Write {
 file /s/prods/colds/sequence/0089_mou/0089_mou_0010/vzero/image/wip/0089_mou_0010-vzero-base-nk-out-v003-acescg-exr/0089_mou_0010-vzero-base-nk-out-v003-acescg.%04d.exr
 colorspace acescg
 file_type exr
 compression DWAA
 dw_compression_level 16
 metadata "all metadata"
 first_part rgba
 beforeRender miCreateFolders.miCreateFolders()
 name out
 tile_color 0xff880000
 label Bricks
 xpos -3076
 ypos 6284
 addUserKnob {20 mikWrite}
 addUserKnob {1 mikData l "" +STARTLINE +HIDDEN}
 mikData "\{\"type_source_selected\": \"root\", \"sources\": \{\"root\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[\"vzero\"], \"selected\": 0\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[\"0089_mou_0010\"], \"selected\": 0\}, \"name\": \{\"cache\": \"\", \"values\": \[\"0089_mou_0010\"], \"selected\": 0\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[\"0089_mou\"], \"selected\": 0\}, \"syncWithComp\": \{\"cache\": \"\", \"values\": \[1], \"selected\": 0\}, \"colorspace\": \{\"cache\": \"acescg\", \"values\": \[\"acescg\"], \"selected\": 0\}, \"variant\": \{\"cache\": \"base\", \"values\": \[\"base\"], \"selected\": 0\}, \"render_source\": \{\"cache\": \"nk\", \"values\": \[\"nk\", \"nkmatte\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[\"out\"], \"selected\": 0\}, \"dwaCompLevel\": \{\"cache\": \"\", \"values\": \[\"16\"], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"exr\", \"values\": \[\"exr\"], \"selected\": 0\}, \"exrCompressionMode\": \{\"cache\": \"\", \"values\": \[\"dwaa\"], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[3], \"selected\": 0\}, \"isElement\": \{\"cache\": \"\", \"values\": \[\"shot\", \"element\"], \"selected\": 0\}\}, \"assets\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"acescg\", \"values\": \[\"linear\", \"sRGB\", \"rec709\", \"Cineon\", \"Gamma1.8\", \"Gamma2.2\", \"Gamma2.4\", \"Gamma2.6\", \"Panalog\", \"REDLog\", \"ViperLog\", \"AlexaV3LogC\", \"PLogLin\", \"SLog\", \"SLog1\", \"SLog2\", \"SLog3\", \"CLog\", \"Log3G10\", \"Log3G12\", \"HybridLogGamma\", \"Protune\", \"BT1886\", \"st2084\", \"aces\", \"acescc\", \"acescct\", \"acesproxy\", \"acescg\", \"adx10\", \"adx16\", \"arri_v3logc_wg\", \"rec709_gamma22\", \"rec709_d60\", \"srgb8\", \"srgb_texture\", \"srgb_d60\", \"lmt_shaper\", \"log2_48_nits_shaper\", \"log2_48_nits_shaper_ap1\", \"linear_srgb\", \"raw\", \"dcdm_p3_clip\", \"p3dci\", \"rl3g10_rwg\", \"rwg_lin\", \"slog3_sgamutcine\", \"Candidate CAMDRT rev035 - Rec.709\"], \"selected\": 28\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"nk\", \"values\": \[\"nk\", \"nkmatte\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"exr\", \"values\": \[\"jpg\", \"dpx\", \"exr\", \"png\", \"tiff\", \"tga\"], \"selected\": 2\}, \"Asset\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"sg_asset_type\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}\}\}"
 addUserKnob {52 mikWriteUI l "" -STARTLINE T __import__('mikIO.ui.nuke.customKnobs.mikIOKnob').ui.nuke.customKnobs.mikIOKnob.MikWriteKnob()}
}
push $N8f17cf00
Dot {
 name DOT_DENOISE_INPUT1
 label "DO NOT DELETE"
 xpos -1543
 ypos 4184
}
Group {
 name Group3
 xpos -1577
 ypos 4217
}
 Input {
  inputs 0
  name Input1
  xpos 228
  ypos -252
 }
 Add {
  value 0.01
  name Add3
  xpos 228
  ypos -212
 }
 OFXcom.absoft.neatvideo4_v4 {
  DNP 
  NFP ODA1APotAAAAAAAAAAABAAAAAACAP2Zmhj/NzIw/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AAAAAAAAAAAAAIA/AACAPwAAgD8AAIA/AACAPwAAgD8BAAAAAADAPwAAwD8AAIA/AACAPwAAgD8BAAAAAAAAP5qZmT6amRk+AAAAAAAAgD8AAAAAAAAAAAAAgD8AAIA/AACAPwAAgD8AAQAAAACAPwAAAAAAAAAAAACAPwAAAAAAAAAAAQABAQEBAQEBAQAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAwAAAAAAgD8AAAAAAAAAAAAAwD8BAAAAAAAAAAAAAD8BAAEBAQEAAAAAAAAAAAAAAAAAAAEAAAABAAAAAAAAAAAAQD8AAIA/AACAPwAAgD8BAAAAAAAAAAAAgD8AAIA/AQAAAAAAAACamVkgw
  ParamsHash1 1061426009
  ParamsHash2 260
  ParamsHash3 0
  name "Reduce Noise v4_2"
  xpos 228
  ypos -147
 }
 Add {
  value -0.01
  name Add4
  xpos 228
  ypos -90
 }
 Output {
  name Output1
  xpos 228
  ypos 10
 }
end_group
Dot {
 name DOT_DENOISE_OUTPUT1
 label "DO NOT DELETE"
 xpos -1543
 ypos 4266
}
Write {
 file /s/prods/colds/sequence/0089_mou/0089_mou_0010/vzero/image/wip/0089_mou_0010-vzero-base-nk-DGN-v003-acescg-exr/0089_mou_0010-vzero-base-nk-DGN-v003-acescg.%04d.exr
 colorspace acescg
 file_type exr
 compression DWAA
 dw_compression_level 0
 metadata "all metadata"
 first_part rgba
 create_directories true
 version 1
 in_colorspace scene_linear
 out_colorspace scene_linear
 beforeRender miCreateFolders.miCreateFolders()
 name DGN
 tile_color 0xff880000
 label Bricks
 xpos -1577
 ypos 6280
 disable {{"\[if \{\[value RETIME_ON_OFF.ChoiceRetime] == \"NONE\" &&  \[value DGN_ON_OFF.dgn_on_off] != \"NONE\"\} \{return \"0\"\} \{return \"1\"\}]"}}
 addUserKnob {20 mikWrite}
 addUserKnob {1 mikData l "" +STARTLINE +HIDDEN}
 mikData "\{\"type_source_selected\": \"root\", \"sources\": \{\"root\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[\"vzero\"], \"selected\": 0\}, \"Shot\": \{\"cache\": \"001_060\", \"values\": \[\"0089_mou_0010\"], \"selected\": 0\}, \"name\": \{\"cache\": \"\", \"values\": \[\"0089_mou_0010\"], \"selected\": 0\}, \"Sequence\": \{\"cache\": \"001\", \"values\": \[\"0089_mou\"], \"selected\": 0\}, \"syncWithComp\": \{\"cache\": \"\", \"values\": \[1], \"selected\": 0\}, \"colorspace\": \{\"cache\": \"acescg\", \"values\": \[\"acescg\"], \"selected\": 0\}, \"variant\": \{\"cache\": \"base\", \"values\": \[\"base\"], \"selected\": 0\}, \"render_source\": \{\"cache\": \"nk\", \"values\": \[\"nk\", \"nkmatte\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[\"DGN\"], \"selected\": 0\}, \"dwaCompLevel\": \{\"cache\": \"\", \"values\": \[\"0\"], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"exr\", \"values\": \[\"exr\"], \"selected\": 0\}, \"exrCompressionMode\": \{\"cache\": \"\", \"values\": \[\"None\"], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[3], \"selected\": 0\}, \"isElement\": \{\"cache\": \"\", \"values\": \[\"shot\", \"element\"], \"selected\": 0\}\}, \"assets\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"acescg\", \"values\": \[\"linear\", \"sRGB\", \"rec709\", \"Cineon\", \"Gamma1.8\", \"Gamma2.2\", \"Gamma2.4\", \"Gamma2.6\", \"Panalog\", \"REDLog\", \"ViperLog\", \"AlexaV3LogC\", \"PLogLin\", \"SLog\", \"SLog1\", \"SLog2\", \"SLog3\", \"CLog\", \"Log3G10\", \"Log3G12\", \"HybridLogGamma\", \"Protune\", \"BT1886\", \"st2084\", \"aces\", \"acescc\", \"acescct\", \"acesproxy\", \"acescg\", \"adx10\", \"adx16\", \"arri_v3logc_wg\", \"rec709_gamma22\", \"rec709_d60\", \"srgb8\", \"srgb_texture\", \"srgb_d60\", \"lmt_shaper\", \"log2_48_nits_shaper\", \"log2_48_nits_shaper_ap1\", \"linear_srgb\", \"raw\", \"dcdm_p3_clip\", \"p3dci\", \"rl3g10_rwg\", \"rwg_lin\", \"slog3_sgamutcine\"], \"selected\": 24\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"nk\", \"values\": \[\"nk\", \"nkmatte\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"exr\", \"values\": \[\"jpg\", \"dpx\", \"exr\", \"png\", \"tiff\", \"tga\"], \"selected\": 2\}, \"Asset\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"sg_asset_type\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}\}\}"
 addUserKnob {52 mikWriteUI l "" -STARTLINE T __import__('mikIO.ui.nuke.customKnobs.mikIOKnob').ui.nuke.customKnobs.mikIOKnob.MikWriteKnob()}
}
Read {
 inputs 0
 file_type exr
 file /s/prods/colds/sequence/0089_mou/0089_mou_0010/vzero/image/wip/0089_mou_0010-vzero-base-nk-out-v002-acescg-exr/0089_mou_0010-vzero-base-nk-out-v002-acescg.%04d.exr
 format "4608 1582 0 0 4608 1582 1 colds"
 first 993
 last 1442
 origfirst 993
 origlast 1442
 origset true
 colorspace acescg
 name MikRead3
 tile_color 0xff0001
 xpos -3079
 ypos 6430
 postage_stamp false
 addUserKnob {20 mikRead}
 addUserKnob {1 mikData l "" +STARTLINE +HIDDEN}
 mikData "\{\"type_source_selected\": \"nuke\", \"sources\": \{\"harmony_asset\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"harmony_render_source\": \{\"cache\": \"\", \"values\": \[\"ha\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"vzero\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Asset\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"sg_asset_type\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"image_ext\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"nuke\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"vzero\", \"values\": \[\"vzero\"], \"selected\": 0\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[\"0089_mou_0010\"], \"selected\": 0\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[\"0089_mou\"], \"selected\": 0\}, \"colorspace\": \{\"cache\": \"acescg\", \"values\": \[\"acescg\"], \"selected\": 0\}, \"variant\": \{\"cache\": \"base\", \"values\": \[\"base\"], \"selected\": 0\}, \"render_source\": \{\"cache\": \"nk\", \"values\": \[\"nk\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"out\", \"values\": \[\"out\"], \"selected\": 0\}, \"version\": \{\"cache\": 2, \"values\": \[2], \"selected\": 0\}, \"ext_render_nuke\": \{\"cache\": \"exr\", \"values\": \[\"exr\"], \"selected\": 0\}\}, \"htoa\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[], \"selected\": -1\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[], \"selected\": -1\}, \"extra_variant\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"houdini_render_source\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_aov\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"image_ext\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"assets\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"vzero\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"nk\", \"values\": \[\"nk\", \"nkmatte\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Asset\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"sg_asset_type\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"photoshop_asset\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"vzero\", \"values\": \[], \"selected\": -1\}, \"extension\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Asset\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"sg_asset_type\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"photoshop_render_source\": \{\"cache\": \"\", \"values\": \[\"ps\"], \"selected\": 0\}\}, \"mtoa\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[], \"selected\": -1\}, \"render_layer\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"\", \"values\": \[\"mtoa\"], \"selected\": 0\}, \"render_aov\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"image_ext\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"mtoa_asset\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"vzero\", \"values\": \[], \"selected\": -1\}, \"render_layer\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"\", \"values\": \[\"mtoa\"], \"selected\": 0\}, \"render_aov\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Asset\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"sg_asset_type\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"image_ext\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"footage\": \{\"Task\": \{\"cache\": \"vzero\", \"values\": \[], \"selected\": -1\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[], \"selected\": -1\}, \"extension\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"clarisse\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"clarisse_layer\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[], \"selected\": -1\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[], \"selected\": -1\}, \"clarisse_image\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"\", \"values\": \[\"clarisse\"], \"selected\": 0\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"ext_render_clarisse\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"EZPlayBlast\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[], \"selected\": -1\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[], \"selected\": -1\}, \"camera\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"blast\", \"values\": \[\"blast\"], \"selected\": 0\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"image_ext\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"elements_asset\": \{\"Task\": \{\"cache\": \"vzero\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"nkelem\", \"values\": \[\"nkelem\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Asset\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"sg_asset_type\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"elements_shot\": \{\"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[], \"selected\": -1\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"nkelem\", \"values\": \[\"nkelem\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"photoshop_shot\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[], \"selected\": -1\}, \"extension\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"photoshop_render_source\": \{\"cache\": \"\", \"values\": \[\"ps\"], \"selected\": 0\}\}, \"flame\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[], \"selected\": -1\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[], \"selected\": -1\}, \"ext_render_flame\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"flame_render_source\": \{\"cache\": \"\", \"values\": \[\"fl\"], \"selected\": 0\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"htoa_asset\": \{\"Task\": \{\"cache\": \"vzero\", \"values\": \[], \"selected\": -1\}, \"extra_variant\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"houdini_render_source\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_aov\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Asset\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"sg_asset_type\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"image_ext\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"harmony_shot\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"harmony_render_source\": \{\"cache\": \"\", \"values\": \[\"ha\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[], \"selected\": -1\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"image_ext\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}\}\}"
 addUserKnob {52 mikReadUI l "" -STARTLINE T __import__('mikIO.ui.nuke.customKnobs.mikIOKnob').ui.nuke.customKnobs.mikIOKnob.MikReadKnob()}
}
Read {
 inputs 0
 file_type exr
 file /s/prods/colds/sequence/0089_mou/0089_mou_0010/vzero/image/wip/0089_mou_0010-vzero-base-nk-DGN-v002-acescg-exr/0089_mou_0010-vzero-base-nk-DGN-v002-acescg.%04d.exr
 format "4608 1582 0 0 4608 1582 1 colds"
 first 993
 last 1442
 origfirst 993
 origlast 1442
 origset true
 colorspace acescg
 name MikRead2
 tile_color 0xff0001
 xpos -1566
 ypos 6425
 postage_stamp false
 addUserKnob {20 mikRead}
 addUserKnob {1 mikData l "" +STARTLINE +HIDDEN}
 mikData "\{\"type_source_selected\": \"nuke\", \"sources\": \{\"harmony_asset\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"harmony_render_source\": \{\"cache\": \"\", \"values\": \[\"ha\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"vzero\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Asset\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"sg_asset_type\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"image_ext\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"nuke\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"vzero\", \"values\": \[\"vzero\"], \"selected\": 0\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[\"0089_mou_0010\"], \"selected\": 0\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[\"0089_mou\"], \"selected\": 0\}, \"colorspace\": \{\"cache\": \"acescg\", \"values\": \[\"acescg\"], \"selected\": 0\}, \"variant\": \{\"cache\": \"base\", \"values\": \[\"base\"], \"selected\": 0\}, \"render_source\": \{\"cache\": \"nk\", \"values\": \[\"nk\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"DGN\", \"values\": \[\"DGN\"], \"selected\": 0\}, \"version\": \{\"cache\": 2, \"values\": \[2, 1], \"selected\": 0\}, \"ext_render_nuke\": \{\"cache\": \"exr\", \"values\": \[\"exr\"], \"selected\": 0\}\}, \"htoa\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[], \"selected\": -1\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[], \"selected\": -1\}, \"extra_variant\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"houdini_render_source\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_aov\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"image_ext\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"assets\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"vzero\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"nk\", \"values\": \[\"nk\", \"nkmatte\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Asset\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"sg_asset_type\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"photoshop_asset\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"vzero\", \"values\": \[], \"selected\": -1\}, \"extension\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Asset\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"sg_asset_type\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"photoshop_render_source\": \{\"cache\": \"\", \"values\": \[\"ps\"], \"selected\": 0\}\}, \"mtoa\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[], \"selected\": -1\}, \"render_layer\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"\", \"values\": \[\"mtoa\"], \"selected\": 0\}, \"render_aov\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"image_ext\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"mtoa_asset\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"vzero\", \"values\": \[], \"selected\": -1\}, \"render_layer\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"\", \"values\": \[\"mtoa\"], \"selected\": 0\}, \"render_aov\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Asset\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"sg_asset_type\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"image_ext\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"footage\": \{\"Task\": \{\"cache\": \"vzero\", \"values\": \[], \"selected\": -1\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[], \"selected\": -1\}, \"extension\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"clarisse\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"clarisse_layer\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[], \"selected\": -1\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[], \"selected\": -1\}, \"clarisse_image\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"\", \"values\": \[\"clarisse\"], \"selected\": 0\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"ext_render_clarisse\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"EZPlayBlast\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[], \"selected\": -1\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[], \"selected\": -1\}, \"camera\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"blast\", \"values\": \[\"blast\"], \"selected\": 0\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"image_ext\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"elements_asset\": \{\"Task\": \{\"cache\": \"vzero\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"nkelem\", \"values\": \[\"nkelem\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Asset\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"sg_asset_type\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"elements_shot\": \{\"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[], \"selected\": -1\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_source\": \{\"cache\": \"nkelem\", \"values\": \[\"nkelem\"], \"selected\": 0\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"ext_render_nuke\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"photoshop_shot\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[], \"selected\": -1\}, \"extension\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"photoshop_render_source\": \{\"cache\": \"\", \"values\": \[\"ps\"], \"selected\": 0\}\}, \"flame\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[], \"selected\": -1\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[], \"selected\": -1\}, \"ext_render_flame\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"flame_render_source\": \{\"cache\": \"\", \"values\": \[\"fl\"], \"selected\": 0\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"htoa_asset\": \{\"Task\": \{\"cache\": \"vzero\", \"values\": \[], \"selected\": -1\}, \"extra_variant\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"houdini_render_source\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"render_aov\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"Asset\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"sg_asset_type\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"image_ext\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}, \"harmony_shot\": \{\"status\": \{\"cache\": \"wip\", \"values\": \[\"wip\", \"publish\"], \"selected\": 0\}, \"harmony_render_source\": \{\"cache\": \"\", \"values\": \[\"ha\"], \"selected\": 0\}, \"Task\": \{\"cache\": \"cmp\", \"values\": \[], \"selected\": -1\}, \"Shot\": \{\"cache\": \"0089_mou_0010\", \"values\": \[], \"selected\": -1\}, \"Sequence\": \{\"cache\": \"0089_mou\", \"values\": \[], \"selected\": -1\}, \"colorspace\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"variant\": \{\"cache\": \"base\", \"values\": \[], \"selected\": -1\}, \"write_node\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"version\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}, \"image_ext\": \{\"cache\": \"\", \"values\": \[], \"selected\": -1\}\}\}\}"
 addUserKnob {52 mikReadUI l "" -STARTLINE T __import__('mikIO.ui.nuke.customKnobs.mikIOKnob').ui.nuke.customKnobs.mikIOKnob.MikReadKnob()}
}
push $N8f23f900
Viewer {
 inputs 2
 frame 1416
 frame_range 993-1442
 gain 13.5
 viewerProcess "Gamma 2.2 - Rec.709 (monitors)"
 translate {-0.3145000041 -0.03550000116}
 name Viewer1
 xpos 0
}
